
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009f8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b28  08000b30  00010b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b28  08000b28  00010b30  2**0
                  CONTENTS
  4 .ARM          00000000  08000b28  08000b28  00010b30  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b28  08000b30  00010b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b28  08000b28  00010b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b2c  08000b2c  00010b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000000  08000b30  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000b30  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b30  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010b59  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a9d  00000000  00000000  00010b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008aa  00000000  00000000  00012639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000e2c  00000000  00000000  00012ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000248  00000000  00000000  00013d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000001e0  00000000  00000000  00013f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002c5c  00000000  00000000  00014138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002932  00000000  00000000  00016d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000b79b  00000000  00000000  000196c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000754  00000000  00000000  00024e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b10 	.word	0x08000b10

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000b10 	.word	0x08000b10

08000170 <EXTI0_IRQHandler>:
 * 										ISR FUNCTIONS
 * =======================================================================================
 */


void EXTI0_IRQHandler(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<0;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <EXTI0_IRQHandler+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[0]();
 800017a:	4b03      	ldr	r3, [pc, #12]	; (8000188 <EXTI0_IRQHandler+0x18>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4798      	blx	r3
}
 8000180:	bf00      	nop
 8000182:	bd80      	pop	{r7, pc}
 8000184:	40010400 	.word	0x40010400
 8000188:	2000001c 	.word	0x2000001c

0800018c <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void){
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<1;
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <EXTI1_IRQHandler+0x14>)
 8000192:	2202      	movs	r2, #2
 8000194:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[1]();
 8000196:	4b03      	ldr	r3, [pc, #12]	; (80001a4 <EXTI1_IRQHandler+0x18>)
 8000198:	685b      	ldr	r3, [r3, #4]
 800019a:	4798      	blx	r3
}
 800019c:	bf00      	nop
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	40010400 	.word	0x40010400
 80001a4:	2000001c 	.word	0x2000001c

080001a8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<2;
 80001ac:	4b03      	ldr	r3, [pc, #12]	; (80001bc <EXTI2_IRQHandler+0x14>)
 80001ae:	2204      	movs	r2, #4
 80001b0:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[2]();
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <EXTI2_IRQHandler+0x18>)
 80001b4:	689b      	ldr	r3, [r3, #8]
 80001b6:	4798      	blx	r3
}
 80001b8:	bf00      	nop
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	40010400 	.word	0x40010400
 80001c0:	2000001c 	.word	0x2000001c

080001c4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<3;
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI3_IRQHandler+0x14>)
 80001ca:	2208      	movs	r2, #8
 80001cc:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[3]();
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <EXTI3_IRQHandler+0x18>)
 80001d0:	68db      	ldr	r3, [r3, #12]
 80001d2:	4798      	blx	r3
}
 80001d4:	bf00      	nop
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	40010400 	.word	0x40010400
 80001dc:	2000001c 	.word	0x2000001c

080001e0 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<4;
 80001e4:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <EXTI4_IRQHandler+0x14>)
 80001e6:	2210      	movs	r2, #16
 80001e8:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[4]();
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <EXTI4_IRQHandler+0x18>)
 80001ec:	691b      	ldr	r3, [r3, #16]
 80001ee:	4798      	blx	r3
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	40010400 	.word	0x40010400
 80001f8:	2000001c 	.word	0x2000001c

080001fc <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0

	if(EXTI->PR & 1<<5) { EXTI->PR  = 1<<5;   GP_IRQ_Callback[5](); }
 8000200:	4b1f      	ldr	r3, [pc, #124]	; (8000280 <EXTI9_5_IRQHandler+0x84>)
 8000202:	695b      	ldr	r3, [r3, #20]
 8000204:	f003 0320 	and.w	r3, r3, #32
 8000208:	2b00      	cmp	r3, #0
 800020a:	d005      	beq.n	8000218 <EXTI9_5_IRQHandler+0x1c>
 800020c:	4b1c      	ldr	r3, [pc, #112]	; (8000280 <EXTI9_5_IRQHandler+0x84>)
 800020e:	2220      	movs	r2, #32
 8000210:	615a      	str	r2, [r3, #20]
 8000212:	4b1c      	ldr	r3, [pc, #112]	; (8000284 <EXTI9_5_IRQHandler+0x88>)
 8000214:	695b      	ldr	r3, [r3, #20]
 8000216:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR  = 1<<6;   GP_IRQ_Callback[6](); }
 8000218:	4b19      	ldr	r3, [pc, #100]	; (8000280 <EXTI9_5_IRQHandler+0x84>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000220:	2b00      	cmp	r3, #0
 8000222:	d005      	beq.n	8000230 <EXTI9_5_IRQHandler+0x34>
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <EXTI9_5_IRQHandler+0x84>)
 8000226:	2240      	movs	r2, #64	; 0x40
 8000228:	615a      	str	r2, [r3, #20]
 800022a:	4b16      	ldr	r3, [pc, #88]	; (8000284 <EXTI9_5_IRQHandler+0x88>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR  = 1<<7;   GP_IRQ_Callback[7](); }
 8000230:	4b13      	ldr	r3, [pc, #76]	; (8000280 <EXTI9_5_IRQHandler+0x84>)
 8000232:	695b      	ldr	r3, [r3, #20]
 8000234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000238:	2b00      	cmp	r3, #0
 800023a:	d005      	beq.n	8000248 <EXTI9_5_IRQHandler+0x4c>
 800023c:	4b10      	ldr	r3, [pc, #64]	; (8000280 <EXTI9_5_IRQHandler+0x84>)
 800023e:	2280      	movs	r2, #128	; 0x80
 8000240:	615a      	str	r2, [r3, #20]
 8000242:	4b10      	ldr	r3, [pc, #64]	; (8000284 <EXTI9_5_IRQHandler+0x88>)
 8000244:	69db      	ldr	r3, [r3, #28]
 8000246:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR  = 1<<8;   GP_IRQ_Callback[8](); }
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <EXTI9_5_IRQHandler+0x84>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000250:	2b00      	cmp	r3, #0
 8000252:	d006      	beq.n	8000262 <EXTI9_5_IRQHandler+0x66>
 8000254:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <EXTI9_5_IRQHandler+0x84>)
 8000256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800025a:	615a      	str	r2, [r3, #20]
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <EXTI9_5_IRQHandler+0x88>)
 800025e:	6a1b      	ldr	r3, [r3, #32]
 8000260:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR  = 1<<9;   GP_IRQ_Callback[9](); }
 8000262:	4b07      	ldr	r3, [pc, #28]	; (8000280 <EXTI9_5_IRQHandler+0x84>)
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800026a:	2b00      	cmp	r3, #0
 800026c:	d006      	beq.n	800027c <EXTI9_5_IRQHandler+0x80>
 800026e:	4b04      	ldr	r3, [pc, #16]	; (8000280 <EXTI9_5_IRQHandler+0x84>)
 8000270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000274:	615a      	str	r2, [r3, #20]
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <EXTI9_5_IRQHandler+0x88>)
 8000278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800027a:	4798      	blx	r3
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40010400 	.word	0x40010400
 8000284:	2000001c 	.word	0x2000001c

08000288 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void){
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0

	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_Callback[10](); }
 800028c:	4b2d      	ldr	r3, [pc, #180]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000294:	2b00      	cmp	r3, #0
 8000296:	d008      	beq.n	80002aa <EXTI15_10_IRQHandler+0x22>
 8000298:	4b2a      	ldr	r3, [pc, #168]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 800029a:	695b      	ldr	r3, [r3, #20]
 800029c:	4a29      	ldr	r2, [pc, #164]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 800029e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002a2:	6153      	str	r3, [r2, #20]
 80002a4:	4b28      	ldr	r3, [pc, #160]	; (8000348 <EXTI15_10_IRQHandler+0xc0>)
 80002a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002a8:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_Callback[11](); }
 80002aa:	4b26      	ldr	r3, [pc, #152]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d008      	beq.n	80002c8 <EXTI15_10_IRQHandler+0x40>
 80002b6:	4b23      	ldr	r3, [pc, #140]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	4a22      	ldr	r2, [pc, #136]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 80002bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002c0:	6153      	str	r3, [r2, #20]
 80002c2:	4b21      	ldr	r3, [pc, #132]	; (8000348 <EXTI15_10_IRQHandler+0xc0>)
 80002c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002c6:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_Callback[12](); }
 80002c8:	4b1e      	ldr	r3, [pc, #120]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d008      	beq.n	80002e6 <EXTI15_10_IRQHandler+0x5e>
 80002d4:	4b1b      	ldr	r3, [pc, #108]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a1a      	ldr	r2, [pc, #104]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 80002da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002de:	6153      	str	r3, [r2, #20]
 80002e0:	4b19      	ldr	r3, [pc, #100]	; (8000348 <EXTI15_10_IRQHandler+0xc0>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e4:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_Callback[13](); }
 80002e6:	4b17      	ldr	r3, [pc, #92]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d008      	beq.n	8000304 <EXTI15_10_IRQHandler+0x7c>
 80002f2:	4b14      	ldr	r3, [pc, #80]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a13      	ldr	r2, [pc, #76]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 80002f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002fc:	6153      	str	r3, [r2, #20]
 80002fe:	4b12      	ldr	r3, [pc, #72]	; (8000348 <EXTI15_10_IRQHandler+0xc0>)
 8000300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000302:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_Callback[14](); }
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800030c:	2b00      	cmp	r3, #0
 800030e:	d008      	beq.n	8000322 <EXTI15_10_IRQHandler+0x9a>
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	4a0b      	ldr	r2, [pc, #44]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 8000316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800031a:	6153      	str	r3, [r2, #20]
 800031c:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <EXTI15_10_IRQHandler+0xc0>)
 800031e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000320:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_Callback[15](); }
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800032a:	2b00      	cmp	r3, #0
 800032c:	d008      	beq.n	8000340 <EXTI15_10_IRQHandler+0xb8>
 800032e:	4b05      	ldr	r3, [pc, #20]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a04      	ldr	r2, [pc, #16]	; (8000344 <EXTI15_10_IRQHandler+0xbc>)
 8000334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000338:	6153      	str	r3, [r2, #20]
 800033a:	4b03      	ldr	r3, [pc, #12]	; (8000348 <EXTI15_10_IRQHandler+0xc0>)
 800033c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800033e:	4798      	blx	r3
}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40010400 	.word	0x40010400
 8000348:	2000001c 	.word	0x2000001c

0800034c <GET_CRLH_Position>:
#include "GPIO.h"

/**================================================================ */

uint8_t GET_CRLH_Position(uint16_t PinNumber)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000356:	88fb      	ldrh	r3, [r7, #6]
 8000358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800035c:	f000 80a5 	beq.w	80004aa <GET_CRLH_Position+0x15e>
 8000360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000364:	f300 80a3 	bgt.w	80004ae <GET_CRLH_Position+0x162>
 8000368:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800036c:	f000 809b 	beq.w	80004a6 <GET_CRLH_Position+0x15a>
 8000370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000374:	f300 809b 	bgt.w	80004ae <GET_CRLH_Position+0x162>
 8000378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800037c:	f000 8091 	beq.w	80004a2 <GET_CRLH_Position+0x156>
 8000380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000384:	f300 8093 	bgt.w	80004ae <GET_CRLH_Position+0x162>
 8000388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800038c:	f000 8087 	beq.w	800049e <GET_CRLH_Position+0x152>
 8000390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000394:	f300 808b 	bgt.w	80004ae <GET_CRLH_Position+0x162>
 8000398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800039c:	d07d      	beq.n	800049a <GET_CRLH_Position+0x14e>
 800039e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003a2:	f300 8084 	bgt.w	80004ae <GET_CRLH_Position+0x162>
 80003a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003aa:	d074      	beq.n	8000496 <GET_CRLH_Position+0x14a>
 80003ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003b0:	dc7d      	bgt.n	80004ae <GET_CRLH_Position+0x162>
 80003b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003b6:	d06c      	beq.n	8000492 <GET_CRLH_Position+0x146>
 80003b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003bc:	dc77      	bgt.n	80004ae <GET_CRLH_Position+0x162>
 80003be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003c2:	d064      	beq.n	800048e <GET_CRLH_Position+0x142>
 80003c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003c8:	dc71      	bgt.n	80004ae <GET_CRLH_Position+0x162>
 80003ca:	2b80      	cmp	r3, #128	; 0x80
 80003cc:	d05d      	beq.n	800048a <GET_CRLH_Position+0x13e>
 80003ce:	2b80      	cmp	r3, #128	; 0x80
 80003d0:	dc6d      	bgt.n	80004ae <GET_CRLH_Position+0x162>
 80003d2:	2b20      	cmp	r3, #32
 80003d4:	dc48      	bgt.n	8000468 <GET_CRLH_Position+0x11c>
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	dd69      	ble.n	80004ae <GET_CRLH_Position+0x162>
 80003da:	3b01      	subs	r3, #1
 80003dc:	2b1f      	cmp	r3, #31
 80003de:	d866      	bhi.n	80004ae <GET_CRLH_Position+0x162>
 80003e0:	a201      	add	r2, pc, #4	; (adr r2, 80003e8 <GET_CRLH_Position+0x9c>)
 80003e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e6:	bf00      	nop
 80003e8:	0800046f 	.word	0x0800046f
 80003ec:	08000473 	.word	0x08000473
 80003f0:	080004af 	.word	0x080004af
 80003f4:	08000477 	.word	0x08000477
 80003f8:	080004af 	.word	0x080004af
 80003fc:	080004af 	.word	0x080004af
 8000400:	080004af 	.word	0x080004af
 8000404:	0800047b 	.word	0x0800047b
 8000408:	080004af 	.word	0x080004af
 800040c:	080004af 	.word	0x080004af
 8000410:	080004af 	.word	0x080004af
 8000414:	080004af 	.word	0x080004af
 8000418:	080004af 	.word	0x080004af
 800041c:	080004af 	.word	0x080004af
 8000420:	080004af 	.word	0x080004af
 8000424:	0800047f 	.word	0x0800047f
 8000428:	080004af 	.word	0x080004af
 800042c:	080004af 	.word	0x080004af
 8000430:	080004af 	.word	0x080004af
 8000434:	080004af 	.word	0x080004af
 8000438:	080004af 	.word	0x080004af
 800043c:	080004af 	.word	0x080004af
 8000440:	080004af 	.word	0x080004af
 8000444:	080004af 	.word	0x080004af
 8000448:	080004af 	.word	0x080004af
 800044c:	080004af 	.word	0x080004af
 8000450:	080004af 	.word	0x080004af
 8000454:	080004af 	.word	0x080004af
 8000458:	080004af 	.word	0x080004af
 800045c:	080004af 	.word	0x080004af
 8000460:	080004af 	.word	0x080004af
 8000464:	08000483 	.word	0x08000483
 8000468:	2b40      	cmp	r3, #64	; 0x40
 800046a:	d00c      	beq.n	8000486 <GET_CRLH_Position+0x13a>
 800046c:	e01f      	b.n	80004ae <GET_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 800046e:	2300      	movs	r3, #0
 8000470:	e01e      	b.n	80004b0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8000472:	2304      	movs	r3, #4
 8000474:	e01c      	b.n	80004b0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8000476:	2308      	movs	r3, #8
 8000478:	e01a      	b.n	80004b0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 800047a:	230c      	movs	r3, #12
 800047c:	e018      	b.n	80004b0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 800047e:	2310      	movs	r3, #16
 8000480:	e016      	b.n	80004b0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8000482:	2314      	movs	r3, #20
 8000484:	e014      	b.n	80004b0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8000486:	2318      	movs	r3, #24
 8000488:	e012      	b.n	80004b0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 800048a:	231c      	movs	r3, #28
 800048c:	e010      	b.n	80004b0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 800048e:	2300      	movs	r3, #0
 8000490:	e00e      	b.n	80004b0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8000492:	2304      	movs	r3, #4
 8000494:	e00c      	b.n	80004b0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8000496:	2308      	movs	r3, #8
 8000498:	e00a      	b.n	80004b0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 800049a:	230c      	movs	r3, #12
 800049c:	e008      	b.n	80004b0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 800049e:	2310      	movs	r3, #16
 80004a0:	e006      	b.n	80004b0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 80004a2:	2314      	movs	r3, #20
 80004a4:	e004      	b.n	80004b0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 80004a6:	2318      	movs	r3, #24
 80004a8:	e002      	b.n	80004b0 <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 80004aa:	231c      	movs	r3, #28
 80004ac:	e000      	b.n	80004b0 <GET_CRLH_Position+0x164>
		break;
	}
	return 0;
 80004ae:	2300      	movs	r3, #0
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <MCAL_GPIO_Init>:
 * @retval		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init (GPIO_TypeDef* GPIOX , GPIO_PinConfig_t* pinconfig)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15

	volatile uint32_t* config_register = NULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]
	config_register = (pinconfig->GPIO_PinNumber < GPIO_PIN_8)?&GPIOX->CRL:&GPIOX->CRH;
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	2bff      	cmp	r3, #255	; 0xff
 80004d0:	d801      	bhi.n	80004d6 <MCAL_GPIO_Init+0x1a>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	e001      	b.n	80004da <MCAL_GPIO_Init+0x1e>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	3304      	adds	r3, #4
 80004da:	613b      	str	r3, [r7, #16]
	uint8_t pin_final_config = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	75fb      	strb	r3, [r7, #23]
	uint8_t pin_position = GET_CRLH_Position(pinconfig->GPIO_PinNumber);
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff ff31 	bl	800034c <GET_CRLH_Position>
 80004ea:	4603      	mov	r3, r0
 80004ec:	73fb      	strb	r3, [r7, #15]

	// clear CNFy[1:0] MODEy[1:0]
	(*config_register) &= ~(0xF << pin_position);
 80004ee:	693b      	ldr	r3, [r7, #16]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	7bfa      	ldrb	r2, [r7, #15]
 80004f4:	210f      	movs	r1, #15
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	43d2      	mvns	r2, r2
 80004fc:	401a      	ands	r2, r3
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	789b      	ldrb	r3, [r3, #2]
 8000506:	2b07      	cmp	r3, #7
 8000508:	d00b      	beq.n	8000522 <MCAL_GPIO_Init+0x66>
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	789b      	ldrb	r3, [r3, #2]
 800050e:	2b06      	cmp	r3, #6
 8000510:	d007      	beq.n	8000522 <MCAL_GPIO_Init+0x66>
			(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	789b      	ldrb	r3, [r3, #2]
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 8000516:	2b05      	cmp	r3, #5
 8000518:	d003      	beq.n	8000522 <MCAL_GPIO_Init+0x66>
			(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	789b      	ldrb	r3, [r3, #2]
 800051e:	2b04      	cmp	r3, #4
 8000520:	d10e      	bne.n	8000540 <MCAL_GPIO_Init+0x84>

	{	//---------------------CNF[1:0](upper 2 bits)------------MODE[1:0](lower 2 bits)
		pin_final_config = (((pinconfig->GPIO_MODE - 4) << 2) | (pinconfig->GPIO_Output_Speed)) & 0x0F;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	789b      	ldrb	r3, [r3, #2]
 8000526:	3b04      	subs	r3, #4
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	b25a      	sxtb	r2, r3
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	78db      	ldrb	r3, [r3, #3]
 8000530:	b25b      	sxtb	r3, r3
 8000532:	4313      	orrs	r3, r2
 8000534:	b25b      	sxtb	r3, r3
 8000536:	b2db      	uxtb	r3, r3
 8000538:	f003 030f 	and.w	r3, r3, #15
 800053c:	75fb      	strb	r3, [r7, #23]
 800053e:	e031      	b.n	80005a4 <MCAL_GPIO_Init+0xe8>

	//if pin is input (MODE[1:0] == 00)
	else
	{
		//if pin is analog or floating
		if(pinconfig->GPIO_MODE == GPIO_MODE_Analog ||pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	789b      	ldrb	r3, [r3, #2]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d003      	beq.n	8000550 <MCAL_GPIO_Init+0x94>
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	789b      	ldrb	r3, [r3, #2]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d107      	bne.n	8000560 <MCAL_GPIO_Init+0xa4>
		{
			pin_final_config = ((pinconfig->GPIO_MODE <<2) | (0x0)) & 0x0F;
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	789b      	ldrb	r3, [r3, #2]
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	b2db      	uxtb	r3, r3
 8000558:	f003 030f 	and.w	r3, r3, #15
 800055c:	75fb      	strb	r3, [r7, #23]
 800055e:	e021      	b.n	80005a4 <MCAL_GPIO_Init+0xe8>
		}

		//if pin is Alternate function input (same as floating)
		else if (pinconfig->GPIO_MODE == GPIO_MODE_AF_INPUT)  //consider it as input floating
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	789b      	ldrb	r3, [r3, #2]
 8000564:	2b08      	cmp	r3, #8
 8000566:	d107      	bne.n	8000578 <MCAL_GPIO_Init+0xbc>
		{

			pin_final_config = (((pinconfig->GPIO_MODE  << 2) | (0x0)) & 0x0F);
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	789b      	ldrb	r3, [r3, #2]
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	b2db      	uxtb	r3, r3
 8000570:	f003 030f 	and.w	r3, r3, #15
 8000574:	75fb      	strb	r3, [r7, #23]
 8000576:	e015      	b.n	80005a4 <MCAL_GPIO_Init+0xe8>
		}
		//if pin is PU or PD
		else{
			//because (GPIO_MODE_INPUT_PU value is 01 (same as in TRM)
			pin_final_config = (((GPIO_MODE_INPUT_PU  << 2) | (0x0)) & 0x0F);
 8000578:	2308      	movs	r3, #8
 800057a:	75fb      	strb	r3, [r7, #23]

			//pin is PU
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	789b      	ldrb	r3, [r3, #2]
 8000580:	2b02      	cmp	r3, #2
 8000582:	d107      	bne.n	8000594 <MCAL_GPIO_Init+0xd8>
			{
				//from TRM
				GPIOX->ODR |= pinconfig->GPIO_PinNumber;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	8812      	ldrh	r2, [r2, #0]
 800058c:	431a      	orrs	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	e007      	b.n	80005a4 <MCAL_GPIO_Init+0xe8>
			}
			//pin is PD
			else
			{
				//From TRM
				GPIOX->ODR &= ~(pinconfig->GPIO_PinNumber);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	8812      	ldrh	r2, [r2, #0]
 800059c:	43d2      	mvns	r2, r2
 800059e:	401a      	ands	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	60da      	str	r2, [r3, #12]
			}
		}
	}

	(*config_register) |= (pin_final_config << pin_position);
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	7df9      	ldrb	r1, [r7, #23]
 80005aa:	7bfa      	ldrb	r2, [r7, #15]
 80005ac:	fa01 f202 	lsl.w	r2, r1, r2
 80005b0:	431a      	orrs	r2, r3
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	601a      	str	r2, [r3, #0]

}
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MCAL_RCC_InitSysClock>:
//}


/*****************************< API Implementations *****************************/
Std_ReturnType MCAL_RCC_InitSysClock(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 80005c6:	2300      	movs	r3, #0
 80005c8:	71fb      	strb	r3, [r7, #7]
        
        /**< Enable the external clock to be the source for the system clock. */
        #if RCC_CLK_BYPASS == RCC_RC_CLK_
            SET_BIT(RCC_CR, RCC_CR_HSEBYP); /**< Choose RC as a SYSCLK */
        #elif RCC_CLK_BYPASS == RCC_CRYSTAL_CLK_
            CLR_BIT(RCC_CR, RCC_CR_HSEBYP); /**< Choose CRYSTAL as a SYSCLK */
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MCAL_RCC_InitSysClock+0x60>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a14      	ldr	r2, [pc, #80]	; (8000620 <MCAL_RCC_InitSysClock+0x60>)
 80005d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005d4:	6013      	str	r3, [r2, #0]
        #else 
            #error "Wrong Choice !!"
        #endif /**< RCC_CLK_BYPASS */

        /**< Enable the High-Speed External clock. */
        SET_BIT(RCC_CR, RCC_CR_HSEON);
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MCAL_RCC_InitSysClock+0x60>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <MCAL_RCC_InitSysClock+0x60>)
 80005dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005e0:	6013      	str	r3, [r2, #0]

        /**< Wait until the High-Speed External clock is stable. */
        while(!GET_BIT(RCC_CR, RCC_CR_HSERDY));
 80005e2:	bf00      	nop
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MCAL_RCC_InitSysClock+0x60>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0f9      	beq.n	80005e4 <MCAL_RCC_InitSysClock+0x24>

        /**< Select High-Speed External clock as the system clock source. */
        RCC_CFGR = 0x00000001;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MCAL_RCC_InitSysClock+0x64>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	601a      	str	r2, [r3, #0]

        Local_FunctionStatus = E_OK;
 80005f6:	2301      	movs	r3, #1
 80005f8:	71fb      	strb	r3, [r7, #7]

        RCC_CFGR |= (AHB_PRESCALE<<4);
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MCAL_RCC_InitSysClock+0x64>)
 80005fc:	4a09      	ldr	r2, [pc, #36]	; (8000624 <MCAL_RCC_InitSysClock+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= (APB2_PRESCALE<<11);
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MCAL_RCC_InitSysClock+0x64>)
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <MCAL_RCC_InitSysClock+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= (APB1_PRESCALE<<8);
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MCAL_RCC_InitSysClock+0x64>)
 800060c:	4a05      	ldr	r2, [pc, #20]	; (8000624 <MCAL_RCC_InitSysClock+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	6013      	str	r3, [r2, #0]
    #else
        #error "Wrong Choice !!"

    #endif /**< RCC_SYSCLK */

    return Local_FunctionStatus;
 8000612:	79fb      	ldrb	r3, [r7, #7]
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000
 8000624:	40021004 	.word	0x40021004

08000628 <MCAL_RCC_EnablePeripheral>:

Std_ReturnType MCAL_RCC_EnablePeripheral(u8 Copy_BusId, u8 Copy_PeripheralId)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	460a      	mov	r2, r1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	4613      	mov	r3, r2
 8000636:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8000638:	2300      	movs	r3, #0
 800063a:	73fb      	strb	r3, [r7, #15]

    switch(Copy_BusId)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b02      	cmp	r3, #2
 8000640:	d020      	beq.n	8000684 <MCAL_RCC_EnablePeripheral+0x5c>
 8000642:	2b02      	cmp	r3, #2
 8000644:	dc2b      	bgt.n	800069e <MCAL_RCC_EnablePeripheral+0x76>
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <MCAL_RCC_EnablePeripheral+0x28>
 800064a:	2b01      	cmp	r3, #1
 800064c:	d00d      	beq.n	800066a <MCAL_RCC_EnablePeripheral+0x42>
 800064e:	e026      	b.n	800069e <MCAL_RCC_EnablePeripheral+0x76>
    {
        /**< Enable the peripheral on the AHB bus. */
        case RCC_AHB:
            SET_BIT(RCC_AHBENR, Copy_PeripheralId);
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MCAL_RCC_EnablePeripheral+0x88>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	79ba      	ldrb	r2, [r7, #6]
 8000656:	2101      	movs	r1, #1
 8000658:	fa01 f202 	lsl.w	r2, r1, r2
 800065c:	4611      	mov	r1, r2
 800065e:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <MCAL_RCC_EnablePeripheral+0x88>)
 8000660:	430b      	orrs	r3, r1
 8000662:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8000664:	2301      	movs	r3, #1
 8000666:	73fb      	strb	r3, [r7, #15]
            break;
 8000668:	e01c      	b.n	80006a4 <MCAL_RCC_EnablePeripheral+0x7c>

        /**< Enable the peripheral on the APB1 bus. */
        case RCC_APB1:
            SET_BIT(RCC_APB1ENR, Copy_PeripheralId);
 800066a:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MCAL_RCC_EnablePeripheral+0x8c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	79ba      	ldrb	r2, [r7, #6]
 8000670:	2101      	movs	r1, #1
 8000672:	fa01 f202 	lsl.w	r2, r1, r2
 8000676:	4611      	mov	r1, r2
 8000678:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <MCAL_RCC_EnablePeripheral+0x8c>)
 800067a:	430b      	orrs	r3, r1
 800067c:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 800067e:	2301      	movs	r3, #1
 8000680:	73fb      	strb	r3, [r7, #15]
            break;
 8000682:	e00f      	b.n	80006a4 <MCAL_RCC_EnablePeripheral+0x7c>

        /**< Enable the peripheral on the APB2 bus. */
        case RCC_APB2:
            SET_BIT(RCC_APB2ENR, Copy_PeripheralId);
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MCAL_RCC_EnablePeripheral+0x90>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	79ba      	ldrb	r2, [r7, #6]
 800068a:	2101      	movs	r1, #1
 800068c:	fa01 f202 	lsl.w	r2, r1, r2
 8000690:	4611      	mov	r1, r2
 8000692:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <MCAL_RCC_EnablePeripheral+0x90>)
 8000694:	430b      	orrs	r3, r1
 8000696:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8000698:	2301      	movs	r3, #1
 800069a:	73fb      	strb	r3, [r7, #15]
            break;
 800069c:	e002      	b.n	80006a4 <MCAL_RCC_EnablePeripheral+0x7c>

        default:
            Local_FunctionStatus = E_NOT_OK;
 800069e:	2300      	movs	r3, #0
 80006a0:	73fb      	strb	r3, [r7, #15]
            break;
 80006a2:	bf00      	nop
    }

    return Local_FunctionStatus;
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	40021014 	.word	0x40021014
 80006b4:	4002101c 	.word	0x4002101c
 80006b8:	40021018 	.word	0x40021018

080006bc <MCAL_RCC_GetSYSCLK>:

    return Local_FunctionStatus;
}

uint32_t MCAL_RCC_GetSYSCLK(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
#if RCC_SYSCLK == RCC_HSE
	return HSE_VAL;
 80006c0:	4b02      	ldr	r3, [pc, #8]	; (80006cc <MCAL_RCC_GetSYSCLK+0x10>)
#elif RCC_SYSCLK == RCC_PLL
	return (PLL_MUL_Calculator(RCC_PLL_INPUT_VAL, RCC_PLL_MUL));
#else
	return E_NOT_OK;
#endif
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	007a1200 	.word	0x007a1200

080006d0 <MCAL_RCC_GetHCLK>:
uint32_t MCAL_RCC_GetHCLK(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetSYSCLK() >> AHB_PrescaleTable[AHB_PRESCALE]);
 80006d4:	f7ff fff2 	bl	80006bc <MCAL_RCC_GetSYSCLK>
 80006d8:	4603      	mov	r3, r0
 80006da:	2200      	movs	r2, #0
 80006dc:	40d3      	lsrs	r3, r2
}
 80006de:	4618      	mov	r0, r3
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <MCAL_RCC_GetPCLK1>:
uint32_t MCAL_RCC_GetPCLK1(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLK() >> APB_PrescaleTable[APB1_PRESCALE]);
 80006e6:	f7ff fff3 	bl	80006d0 <MCAL_RCC_GetHCLK>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2200      	movs	r2, #0
 80006ee:	40d3      	lsrs	r3, r2
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <MCAL_RCC_GetPCLK2>:
uint32_t MCAL_RCC_GetPCLK2(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLK() >> APB_PrescaleTable[APB2_PRESCALE]);
 80006f8:	f7ff ffea 	bl	80006d0 <MCAL_RCC_GetHCLK>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2200      	movs	r2, #0
 8000700:	40d3      	lsrs	r3, r2
}
 8000702:	4618      	mov	r0, r3
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <SysTick_Handler>:


/*****************************< ISR function *****************************/

void SysTick_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    if(G_P_SYSfun != NULL)
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <SysTick_Handler+0x18>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <SysTick_Handler+0x12>
    {
        G_P_SYSfun();
 8000714:	4b02      	ldr	r3, [pc, #8]	; (8000720 <SysTick_Handler+0x18>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4798      	blx	r3
    }
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000058 	.word	0x20000058

08000724 <MCAL_USART_Init>:


/*************<Implementation***********/

void MCAL_USART_Init(USART_TypeDef * USARTx, USART_Config_t* config,u8 LocalIndex)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	4613      	mov	r3, r2
 8000730:	71fb      	strb	r3, [r7, #7]
	u32 pclk, BRR;
	Global_USART_Config[LocalIndex] = config;
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	4937      	ldr	r1, [pc, #220]	; (8000814 <MCAL_USART_Init+0xf0>)
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//EN USART
	USARTx->CR1 |= 1<<13;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	60da      	str	r2, [r3, #12]
	//Enable TX or RX or both
	USARTx->CR1 |= config->USART_Mode;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	68ba      	ldr	r2, [r7, #8]
 800074e:	7812      	ldrb	r2, [r2, #0]
 8000750:	431a      	orrs	r2, r3
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	60da      	str	r2, [r3, #12]
	//Configure Parity width
	USARTx->CR1 |= config->PayLoadLength;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	7a12      	ldrb	r2, [r2, #8]
 800075e:	431a      	orrs	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	60da      	str	r2, [r3, #12]
	//configure Parity bit
	USARTx->CR1 |= config->Parity;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	7a52      	ldrb	r2, [r2, #9]
 800076c:	431a      	orrs	r2, r3
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	60da      	str	r2, [r3, #12]
	//configure Stop bits
	USARTx->CR2 |= config->StopBits;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	691b      	ldr	r3, [r3, #16]
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	7a92      	ldrb	r2, [r2, #10]
 800077a:	431a      	orrs	r2, r3
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	611a      	str	r2, [r3, #16]
	//configure Flow Control
	USARTx->CR3 |= config->FlowCTRL;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	7ad2      	ldrb	r2, [r2, #11]
 8000788:	431a      	orrs	r2, r3
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	615a      	str	r2, [r3, #20]
	//configure Baud Rate
	//call RCC get clk to know the clock for which you will calculate the baud rate
	if(USARTx == USART1)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	4a21      	ldr	r2, [pc, #132]	; (8000818 <MCAL_USART_Init+0xf4>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d103      	bne.n	800079e <MCAL_USART_Init+0x7a>
	{
		pclk = MCAL_RCC_GetPCLK2();
 8000796:	f7ff ffad 	bl	80006f4 <MCAL_RCC_GetPCLK2>
 800079a:	6178      	str	r0, [r7, #20]
 800079c:	e002      	b.n	80007a4 <MCAL_USART_Init+0x80>
	}
	else
	{
		pclk = MCAL_RCC_GetPCLK1();
 800079e:	f7ff ffa0 	bl	80006e2 <MCAL_RCC_GetPCLK1>
 80007a2:	6178      	str	r0, [r7, #20]
	}
	BRR = UART_BRR_VALUE(pclk, config->BaudRate);
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	697a      	ldr	r2, [r7, #20]
 80007ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b0:	0119      	lsls	r1, r3, #4
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	4613      	mov	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	009a      	lsls	r2, r3, #2
 80007bc:	441a      	add	r2, r3
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80007d4:	2064      	movs	r0, #100	; 0x64
 80007d6:	fb00 f303 	mul.w	r3, r0, r3
 80007da:	1ad3      	subs	r3, r2, r3
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	4a0f      	ldr	r2, [pc, #60]	; (800081c <MCAL_USART_Init+0xf8>)
 80007e0:	fba2 2303 	umull	r2, r3, r2, r3
 80007e4:	095b      	lsrs	r3, r3, #5
 80007e6:	f003 030f 	and.w	r3, r3, #15
 80007ea:	430b      	orrs	r3, r1
 80007ec:	613b      	str	r3, [r7, #16]
	USARTx->BRR = BRR;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	693a      	ldr	r2, [r7, #16]
 80007f2:	609a      	str	r2, [r3, #8]

	//Enable or Disable interrupt
	if(config->IRQ_Enable != USART_IRQ_ENABLE_NONE)
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	7b1b      	ldrb	r3, [r3, #12]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d006      	beq.n	800080a <MCAL_USART_Init+0xe6>
	{
		USARTx->CR1 |= (config->IRQ_Enable);
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	68ba      	ldr	r2, [r7, #8]
 8000802:	7b12      	ldrb	r2, [r2, #12]
 8000804:	431a      	orrs	r2, r3
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	60da      	str	r2, [r3, #12]
	}

	//NVIC is handled separately as well as RCC initialization
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000005c 	.word	0x2000005c
 8000818:	40013800 	.word	0x40013800
 800081c:	51eb851f 	.word	0x51eb851f

08000820 <MCAL_USART_Send_Data>:
		MCAL_NVIC_DisableIRQ(NVIC_USART3_IRQn);
	}
}

void MCAL_USART_Send_Data(USART_TypeDef * USARTx, uint16_t* pTxBuffer,enum Polling_Mechanism PollingEN, u8 LocalIndex)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	4611      	mov	r1, r2
 800082c:	461a      	mov	r2, r3
 800082e:	460b      	mov	r3, r1
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	4613      	mov	r3, r2
 8000834:	71bb      	strb	r3, [r7, #6]

	if(PollingEN == enable)
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d106      	bne.n	800084a <MCAL_USART_Send_Data+0x2a>
	{
		while(!(USARTx->SR & 1<<7));
 800083c:	bf00      	nop
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0f9      	beq.n	800083e <MCAL_USART_Send_Data+0x1e>
	{
		USARTx->DR = (*pTxBuffer & (u16)0x1FF);
	}
	else
	{
		USARTx->DR = (*pTxBuffer & (u8)0xFF);
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	605a      	str	r2, [r3, #4]
	}
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
	...

08000860 <MCAL_USART_Get_Data>:
	while(!(USARTx->SR & 1<<6));
}


void MCAL_USART_Get_Data(USART_TypeDef * USARTx, uint16_t* pRxBuffer,  enum Polling_Mechanism PollingEN,u8 LocalIndex)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	4611      	mov	r1, r2
 800086c:	461a      	mov	r2, r3
 800086e:	460b      	mov	r3, r1
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	4613      	mov	r3, r2
 8000874:	71bb      	strb	r3, [r7, #6]
	if(PollingEN == enable)
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d106      	bne.n	800088a <MCAL_USART_Get_Data+0x2a>
	{
		while(!(USARTx->SR & 1<<5));
 800087c:	bf00      	nop
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f003 0320 	and.w	r3, r3, #32
 8000886:	2b00      	cmp	r3, #0
 8000888:	d0f9      	beq.n	800087e <MCAL_USART_Get_Data+0x1e>
			*((u16*) pRxBuffer) = (USARTx->DR & (u8)0xFF);
		}
	}
	else
	{
		if(Global_USART_Config[LocalIndex]->Parity == USART_PARITY_NONE)
 800088a:	79bb      	ldrb	r3, [r7, #6]
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <MCAL_USART_Get_Data+0x64>)
 800088e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000892:	7a5b      	ldrb	r3, [r3, #9]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d107      	bne.n	80008a8 <MCAL_USART_Get_Data+0x48>
		{
			*((u16*) pRxBuffer) = (USARTx->DR & (u8)0xFF);
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	b29b      	uxth	r3, r3
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	801a      	strh	r2, [r3, #0]
		else
		{
			*((u16*) pRxBuffer) = (USARTx->DR & (u8)0x7F);
		}
	}
}
 80008a6:	e007      	b.n	80008b8 <MCAL_USART_Get_Data+0x58>
			*((u16*) pRxBuffer) = (USARTx->DR & (u8)0x7F);
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	801a      	strh	r2, [r3, #0]
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	2000005c 	.word	0x2000005c

080008c8 <MCAL_USART_GPIO_SetPins>:


void MCAL_USART_GPIO_SetPins(USART_TypeDef * USARTx, u8 LocalIndex)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
	GPIO_PinConfig_t cfg;
	if(USARTx == USART1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a2b      	ldr	r2, [pc, #172]	; (8000984 <MCAL_USART_GPIO_SetPins+0xbc>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d118      	bne.n	800090e <MCAL_USART_GPIO_SetPins+0x46>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		cfg.GPIO_PinNumber = GPIO_PIN_9;
 80008dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e0:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008e2:	2306      	movs	r3, #6
 80008e4:	73bb      	strb	r3, [r7, #14]
		cfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 80008e6:	2302      	movs	r3, #2
 80008e8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &cfg);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4619      	mov	r1, r3
 80008f0:	4825      	ldr	r0, [pc, #148]	; (8000988 <MCAL_USART_GPIO_SetPins+0xc0>)
 80008f2:	f7ff fde3 	bl	80004bc <MCAL_GPIO_Init>

		//PA10 RX
		cfg.GPIO_PinNumber = GPIO_PIN_10;
 80008f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fa:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80008fc:	2301      	movs	r3, #1
 80008fe:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &cfg);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	4619      	mov	r1, r3
 8000906:	4820      	ldr	r0, [pc, #128]	; (8000988 <MCAL_USART_GPIO_SetPins+0xc0>)
 8000908:	f7ff fdd8 	bl	80004bc <MCAL_GPIO_Init>
			cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &cfg);

		}
	}
}
 800090c:	e036      	b.n	800097c <MCAL_USART_GPIO_SetPins+0xb4>
	else if(USARTx == USART2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a1e      	ldr	r2, [pc, #120]	; (800098c <MCAL_USART_GPIO_SetPins+0xc4>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d116      	bne.n	8000944 <MCAL_USART_GPIO_SetPins+0x7c>
		cfg.GPIO_PinNumber = GPIO_PIN_2;
 8000916:	2304      	movs	r3, #4
 8000918:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800091a:	2306      	movs	r3, #6
 800091c:	73bb      	strb	r3, [r7, #14]
		cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800091e:	2301      	movs	r3, #1
 8000920:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &cfg);
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4619      	mov	r1, r3
 8000928:	4817      	ldr	r0, [pc, #92]	; (8000988 <MCAL_USART_GPIO_SetPins+0xc0>)
 800092a:	f7ff fdc7 	bl	80004bc <MCAL_GPIO_Init>
		cfg.GPIO_PinNumber = GPIO_PIN_3;
 800092e:	2308      	movs	r3, #8
 8000930:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000932:	2301      	movs	r3, #1
 8000934:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &cfg);
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	4619      	mov	r1, r3
 800093c:	4812      	ldr	r0, [pc, #72]	; (8000988 <MCAL_USART_GPIO_SetPins+0xc0>)
 800093e:	f7ff fdbd 	bl	80004bc <MCAL_GPIO_Init>
}
 8000942:	e01b      	b.n	800097c <MCAL_USART_GPIO_SetPins+0xb4>
	else if(USARTx == USART3)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <MCAL_USART_GPIO_SetPins+0xc8>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d117      	bne.n	800097c <MCAL_USART_GPIO_SetPins+0xb4>
		cfg.GPIO_PinNumber = GPIO_PIN_10;
 800094c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000950:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000952:	2306      	movs	r3, #6
 8000954:	73bb      	strb	r3, [r7, #14]
		cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000956:	2301      	movs	r3, #1
 8000958:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &cfg);
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	4619      	mov	r1, r3
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <MCAL_USART_GPIO_SetPins+0xcc>)
 8000962:	f7ff fdab 	bl	80004bc <MCAL_GPIO_Init>
		cfg.GPIO_PinNumber = GPIO_PIN_11;
 8000966:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800096a:	81bb      	strh	r3, [r7, #12]
		cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800096c:	2301      	movs	r3, #1
 800096e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &cfg);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	4807      	ldr	r0, [pc, #28]	; (8000994 <MCAL_USART_GPIO_SetPins+0xcc>)
 8000978:	f7ff fda0 	bl	80004bc <MCAL_GPIO_Init>
}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40013800 	.word	0x40013800
 8000988:	40010800 	.word	0x40010800
 800098c:	40004400 	.word	0x40004400
 8000990:	40004800 	.word	0x40004800
 8000994:	40010c00 	.word	0x40010c00

08000998 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 800099c:	4b02      	ldr	r3, [pc, #8]	; (80009a8 <USART1_IRQHandler+0x10>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	691b      	ldr	r3, [r3, #16]
 80009a2:	4798      	blx	r3
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000005c 	.word	0x2000005c

080009ac <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 80009b0:	4b02      	ldr	r3, [pc, #8]	; (80009bc <USART2_IRQHandler+0x10>)
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	691b      	ldr	r3, [r3, #16]
 80009b6:	4798      	blx	r3
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000005c 	.word	0x2000005c

080009c0 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <USART3_IRQHandler+0x10>)
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	691b      	ldr	r3, [r3, #16]
 80009ca:	4798      	blx	r3
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000005c 	.word	0x2000005c

080009d4 <main>:
u16 ch;

/*****************************< Main  *********************************/

int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
    /********< Initialize Peripherals and Clock *************************/
	MCAL_RCC_InitSysClock();
 80009da:	f7ff fdf1 	bl	80005c0 <MCAL_RCC_InitSysClock>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_IOPAEN);
 80009de:	2102      	movs	r1, #2
 80009e0:	2002      	movs	r0, #2
 80009e2:	f7ff fe21 	bl	8000628 <MCAL_RCC_EnablePeripheral>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_IOPBEN);
 80009e6:	2103      	movs	r1, #3
 80009e8:	2002      	movs	r0, #2
 80009ea:	f7ff fe1d 	bl	8000628 <MCAL_RCC_EnablePeripheral>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_AFIOEN);
 80009ee:	2100      	movs	r1, #0
 80009f0:	2002      	movs	r0, #2
 80009f2:	f7ff fe19 	bl	8000628 <MCAL_RCC_EnablePeripheral>
	MCAL_RCC_EnablePeripheral(RCC_APB2, RCC_APB2ENR_USART1EN);
 80009f6:	210e      	movs	r1, #14
 80009f8:	2002      	movs	r0, #2
 80009fa:	f7ff fe15 	bl	8000628 <MCAL_RCC_EnablePeripheral>

	GPIO_PinConfig_t cfg;
	cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80009fe:	2304      	movs	r3, #4
 8000a00:	75bb      	strb	r3, [r7, #22]
	cfg.GPIO_Output_Speed = GPIO_SPEED_2M;
 8000a02:	2302      	movs	r3, #2
 8000a04:	75fb      	strb	r3, [r7, #23]
	cfg.GPIO_PinNumber = GPIO_PIN_0;
 8000a06:	2301      	movs	r3, #1
 8000a08:	82bb      	strh	r3, [r7, #20]
	MCAL_GPIO_Init(GPIOA, &cfg);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4815      	ldr	r0, [pc, #84]	; (8000a68 <main+0x94>)
 8000a12:	f7ff fd53 	bl	80004bc <MCAL_GPIO_Init>

	USART_Config_t usartCFG;
	usartCFG.BaudRate = USART_BAUD_RATE_9600;
 8000a16:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000a1a:	607b      	str	r3, [r7, #4]
	usartCFG.FlowCTRL = USART_FLOW_CTRL_NONE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	72fb      	strb	r3, [r7, #11]
	usartCFG.Parity = USART_PARITY_NONE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	727b      	strb	r3, [r7, #9]
	usartCFG.PayLoadLength = USART_DATA_8bits;
 8000a24:	2300      	movs	r3, #0
 8000a26:	723b      	strb	r3, [r7, #8]
	usartCFG.StopBits = USART_STOP_BITS_1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	72bb      	strb	r3, [r7, #10]
	usartCFG.IRQ_Enable = USART_IRQ_ENABLE_NONE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	733b      	strb	r3, [r7, #12]
	usartCFG.USART_Mode = USART_MODE_TX_RX;
 8000a30:	230c      	movs	r3, #12
 8000a32:	703b      	strb	r3, [r7, #0]
	usartCFG.P_IRQ_CallBack = NULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]

	MCAL_USART_Init(USART1, &usartCFG,USART_CFG_1);
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480b      	ldr	r0, [pc, #44]	; (8000a6c <main+0x98>)
 8000a40:	f7ff fe70 	bl	8000724 <MCAL_USART_Init>
	MCAL_USART_GPIO_SetPins(USART1,0);
 8000a44:	2100      	movs	r1, #0
 8000a46:	4809      	ldr	r0, [pc, #36]	; (8000a6c <main+0x98>)
 8000a48:	f7ff ff3e 	bl	80008c8 <MCAL_USART_GPIO_SetPins>

	while(1)
	{
		MCAL_USART_Get_Data(USART1, &ch, enable,USART_CFG_1);
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4907      	ldr	r1, [pc, #28]	; (8000a70 <main+0x9c>)
 8000a52:	4806      	ldr	r0, [pc, #24]	; (8000a6c <main+0x98>)
 8000a54:	f7ff ff04 	bl	8000860 <MCAL_USART_Get_Data>
		MCAL_USART_Send_Data(USART1, &ch, enable,USART_CFG_1);
 8000a58:	2300      	movs	r3, #0
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4904      	ldr	r1, [pc, #16]	; (8000a70 <main+0x9c>)
 8000a5e:	4803      	ldr	r0, [pc, #12]	; (8000a6c <main+0x98>)
 8000a60:	f7ff fede 	bl	8000820 <MCAL_USART_Send_Data>
		MCAL_USART_Get_Data(USART1, &ch, enable,USART_CFG_1);
 8000a64:	e7f2      	b.n	8000a4c <main+0x78>
 8000a66:	bf00      	nop
 8000a68:	40010800 	.word	0x40010800
 8000a6c:	40013800 	.word	0x40013800
 8000a70:	20000068 	.word	0x20000068

08000a74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a78:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	; (8000ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <LoopForever+0xe>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	; (8000ac0 <LoopForever+0x16>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aa2:	f000 f811 	bl	8000ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aa6:	f7ff ff95 	bl	80009d4 <main>

08000aaa <LoopForever>:

LoopForever:
  b LoopForever
 8000aaa:	e7fe      	b.n	8000aaa <LoopForever>
  ldr   r0, =_estack
 8000aac:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ab8:	08000b30 	.word	0x08000b30
  ldr r2, =_sbss
 8000abc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ac0:	2000006c 	.word	0x2000006c

08000ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC1_2_IRQHandler>
	...

08000ac8 <__libc_init_array>:
 8000ac8:	b570      	push	{r4, r5, r6, lr}
 8000aca:	2600      	movs	r6, #0
 8000acc:	4d0c      	ldr	r5, [pc, #48]	; (8000b00 <__libc_init_array+0x38>)
 8000ace:	4c0d      	ldr	r4, [pc, #52]	; (8000b04 <__libc_init_array+0x3c>)
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	10a4      	asrs	r4, r4, #2
 8000ad4:	42a6      	cmp	r6, r4
 8000ad6:	d109      	bne.n	8000aec <__libc_init_array+0x24>
 8000ad8:	f000 f81a 	bl	8000b10 <_init>
 8000adc:	2600      	movs	r6, #0
 8000ade:	4d0a      	ldr	r5, [pc, #40]	; (8000b08 <__libc_init_array+0x40>)
 8000ae0:	4c0a      	ldr	r4, [pc, #40]	; (8000b0c <__libc_init_array+0x44>)
 8000ae2:	1b64      	subs	r4, r4, r5
 8000ae4:	10a4      	asrs	r4, r4, #2
 8000ae6:	42a6      	cmp	r6, r4
 8000ae8:	d105      	bne.n	8000af6 <__libc_init_array+0x2e>
 8000aea:	bd70      	pop	{r4, r5, r6, pc}
 8000aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8000af0:	4798      	blx	r3
 8000af2:	3601      	adds	r6, #1
 8000af4:	e7ee      	b.n	8000ad4 <__libc_init_array+0xc>
 8000af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000afa:	4798      	blx	r3
 8000afc:	3601      	adds	r6, #1
 8000afe:	e7f2      	b.n	8000ae6 <__libc_init_array+0x1e>
 8000b00:	08000b28 	.word	0x08000b28
 8000b04:	08000b28 	.word	0x08000b28
 8000b08:	08000b28 	.word	0x08000b28
 8000b0c:	08000b2c 	.word	0x08000b2c

08000b10 <_init>:
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	bf00      	nop
 8000b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b16:	bc08      	pop	{r3}
 8000b18:	469e      	mov	lr, r3
 8000b1a:	4770      	bx	lr

08000b1c <_fini>:
 8000b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b1e:	bf00      	nop
 8000b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b22:	bc08      	pop	{r3}
 8000b24:	469e      	mov	lr, r3
 8000b26:	4770      	bx	lr
