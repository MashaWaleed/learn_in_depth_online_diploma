
ATMEGA32-Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800060  00800060  000005f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001226  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ad  00000000  00000000  0000198e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a7a  00000000  00000000  0000223b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00002cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000591  00000000  00000000  00002f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000acd  00000000  00000000  00003499  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003f66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  8a:	0c 94 bd 02 	jmp	0x57a	; 0x57a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_kick>:
}

void LCD_kick()
{
	//set enable
	GPIO_voidSetPinValue(LCD_Ctrl_PORT ,LCD_EN , 1 );
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 09 02 	call	0x412	; 0x412 <GPIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	8f e0       	ldi	r24, 0x0F	; 15
  9e:	97 e2       	ldi	r25, 0x27	; 39
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_kick+0xe>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCD_kick+0x14>
  a6:	00 00       	nop
	_delay_ms(5);
	//Reset enable
	GPIO_voidSetPinValue(LCD_Ctrl_PORT ,LCD_EN , 0 );
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	63 e0       	ldi	r22, 0x03	; 3
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 09 02 	call	0x412	; 0x412 <GPIO_voidSetPinValue>
  b2:	08 95       	ret

000000b4 <LCD_Write_command>:
	LCD_Write_command(Entry_mode);
	LCD_Write_command(Begin_first_row);
}

void LCD_Write_command(unsigned char commmand)
{
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
	
	LCD_kick();
	#endif
	
	#ifdef Four_bit_mode
	LCD_in_port = (LCD_in_port &(0x0F)) | (commmand & 0xF0);
  b8:	8b b3       	in	r24, 0x1b	; 27
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	9c 2f       	mov	r25, r28
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	89 2b       	or	r24, r25
  c2:	8b bb       	out	0x1b, r24	; 27
	
	GPIO_voidSetPinValue(LCD_Ctrl_PORT , LCD_RS , GPIO_LOW);
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 09 02 	call	0x412	; 0x412 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_Ctrl_PORT , LCD_RW , GPIO_LOW);
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	62 e0       	ldi	r22, 0x02	; 2
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 09 02 	call	0x412	; 0x412 <GPIO_voidSetPinValue>
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	30 e7       	ldi	r19, 0x70	; 112
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	30 40       	sbci	r19, 0x00	; 0
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <LCD_Write_command+0x2a>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_Write_command+0x34>
  e8:	00 00       	nop
	
	_delay_ms(100);
	LCD_kick();
  ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_kick>
	
	LCD_in_port = (LCD_in_port &(0x0F)) | ((commmand & 0x0F)<<4);
  ee:	2b b3       	in	r18, 0x1b	; 27
  f0:	30 e1       	ldi	r19, 0x10	; 16
  f2:	c3 9f       	mul	r28, r19
  f4:	c0 01       	movw	r24, r0
  f6:	11 24       	eor	r1, r1
  f8:	92 2f       	mov	r25, r18
  fa:	9f 70       	andi	r25, 0x0F	; 15
  fc:	89 2b       	or	r24, r25
  fe:	8b bb       	out	0x1b, r24	; 27
	
	GPIO_voidSetPinValue(LCD_Ctrl_PORT , LCD_RS , 0);
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 09 02 	call	0x412	; 0x412 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_Ctrl_PORT , LCD_RW , 0);
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 09 02 	call	0x412	; 0x412 <GPIO_voidSetPinValue>
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	90 e7       	ldi	r25, 0x70	; 112
 118:	22 e0       	ldi	r18, 0x02	; 2
 11a:	81 50       	subi	r24, 0x01	; 1
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	20 40       	sbci	r18, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <LCD_Write_command+0x66>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_Write_command+0x70>
 124:	00 00       	nop
	
	_delay_ms(100);
	LCD_kick();
 126:	0e 94 49 00 	call	0x92	; 0x92 <LCD_kick>
 12a:	8f e0       	ldi	r24, 0x0F	; 15
 12c:	97 e2       	ldi	r25, 0x27	; 39
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <LCD_Write_command+0x7a>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCD_Write_command+0x80>
 134:	00 00       	nop
	
	_delay_ms(5);
	#endif
}
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <LCD_Write_char>:

void LCD_Write_char(unsigned char data)
{
 13a:	cf 93       	push	r28
 13c:	c8 2f       	mov	r28, r24
	LCD_kick();
	#endif
	
	#ifdef Four_bit_mode
	
	LCD_in_port = (LCD_in_port &(0x0F)) | (data & 0xF0);
 13e:	8b b3       	in	r24, 0x1b	; 27
 140:	8f 70       	andi	r24, 0x0F	; 15
 142:	9c 2f       	mov	r25, r28
 144:	90 7f       	andi	r25, 0xF0	; 240
 146:	89 2b       	or	r24, r25
 148:	8b bb       	out	0x1b, r24	; 27
	
	GPIO_voidSetPinValue(LCD_Ctrl_PORT , LCD_RS , 1);
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 09 02 	call	0x412	; 0x412 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_Ctrl_PORT , LCD_RW , 0);
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 09 02 	call	0x412	; 0x412 <GPIO_voidSetPinValue>
	
	//_delay_ms(100);
	LCD_kick();
 15e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_kick>
	
	LCD_in_port = (LCD_in_port &(0x0F)) | ((data & 0x0F)<<4);
 162:	2b b3       	in	r18, 0x1b	; 27
 164:	30 e1       	ldi	r19, 0x10	; 16
 166:	c3 9f       	mul	r28, r19
 168:	c0 01       	movw	r24, r0
 16a:	11 24       	eor	r1, r1
 16c:	92 2f       	mov	r25, r18
 16e:	9f 70       	andi	r25, 0x0F	; 15
 170:	89 2b       	or	r24, r25
 172:	8b bb       	out	0x1b, r24	; 27
	GPIO_voidSetPinValue(LCD_Ctrl_PORT , LCD_RS , 1);
 174:	41 e0       	ldi	r20, 0x01	; 1
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 09 02 	call	0x412	; 0x412 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_Ctrl_PORT , LCD_RW , 0);
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	62 e0       	ldi	r22, 0x02	; 2
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 09 02 	call	0x412	; 0x412 <GPIO_voidSetPinValue>
	
	//_delay_ms(100);
	LCD_kick();
 188:	0e 94 49 00 	call	0x92	; 0x92 <LCD_kick>
 18c:	8f e0       	ldi	r24, 0x0F	; 15
 18e:	97 e2       	ldi	r25, 0x27	; 39
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_Write_char+0x56>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCD_Write_char+0x5c>
 196:	00 00       	nop
	
	_delay_ms(5);
	#endif
}
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <LCD_is_busy>:
	
	#endif
	
	#ifdef Four_bit_mode
	
	GPIO_voidSetPinDirection(LCD_Ctrl_PORT ,LCD_RS ,GPIO_OUTPUT);
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 93 01 	call	0x326	; 0x326 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(LCD_Ctrl_PORT ,LCD_RW ,GPIO_OUTPUT);
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 93 01 	call	0x326	; 0x326 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(LCD_Ctrl_PORT ,LCD_EN ,GPIO_OUTPUT);
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	63 e0       	ldi	r22, 0x03	; 3
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	0e 94 93 01 	call	0x326	; 0x326 <GPIO_voidSetPinDirection>
	
	
	GPIO_voidSetPinDirection(LCD_Data_PORT ,LCD_D4 ,GPIO_INPUT);
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	64 e0       	ldi	r22, 0x04	; 4
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 93 01 	call	0x326	; 0x326 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(LCD_Data_PORT ,LCD_D5 ,GPIO_INPUT);
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	65 e0       	ldi	r22, 0x05	; 5
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 93 01 	call	0x326	; 0x326 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(LCD_Data_PORT ,LCD_D6 ,GPIO_INPUT);
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	66 e0       	ldi	r22, 0x06	; 6
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 93 01 	call	0x326	; 0x326 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(LCD_Data_PORT ,LCD_D7 ,GPIO_INPUT);
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	67 e0       	ldi	r22, 0x07	; 7
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 93 01 	call	0x326	; 0x326 <GPIO_voidSetPinDirection>
 1e2:	8f e0       	ldi	r24, 0x0F	; 15
 1e4:	97 e2       	ldi	r25, 0x27	; 39
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCD_is_busy+0x4a>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCD_is_busy+0x50>
 1ec:	00 00       	nop
	
	_delay_ms(5);
	
	//command register select
	GPIO_voidSetPinValue(LCD_Ctrl_PORT ,LCD_RS , 0 );
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 09 02 	call	0x412	; 0x412 <GPIO_voidSetPinValue>
	
	//read mode
	GPIO_voidSetPinValue(LCD_Ctrl_PORT ,LCD_RW , 1 );
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	62 e0       	ldi	r22, 0x02	; 2
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 09 02 	call	0x412	; 0x412 <GPIO_voidSetPinValue>
	
	LCD_kick();
 202:	0e 94 49 00 	call	0x92	; 0x92 <LCD_kick>
	
	GPIO_voidSetPinDirection(LCD_Data_PORT ,LCD_D4 ,GPIO_OUTPUT);
 206:	41 e0       	ldi	r20, 0x01	; 1
 208:	64 e0       	ldi	r22, 0x04	; 4
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 93 01 	call	0x326	; 0x326 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(LCD_Data_PORT ,LCD_D5 ,GPIO_OUTPUT);
 210:	41 e0       	ldi	r20, 0x01	; 1
 212:	65 e0       	ldi	r22, 0x05	; 5
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 93 01 	call	0x326	; 0x326 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(LCD_Data_PORT ,LCD_D6 ,GPIO_OUTPUT);
 21a:	41 e0       	ldi	r20, 0x01	; 1
 21c:	66 e0       	ldi	r22, 0x06	; 6
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 93 01 	call	0x326	; 0x326 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(LCD_Data_PORT ,LCD_D7 ,GPIO_OUTPUT);
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	67 e0       	ldi	r22, 0x07	; 7
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 93 01 	call	0x326	; 0x326 <GPIO_voidSetPinDirection>
	
	//write mode
	GPIO_voidSetPinValue(LCD_Ctrl_PORT ,LCD_RW , 0 );
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	62 e0       	ldi	r22, 0x02	; 2
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 09 02 	call	0x412	; 0x412 <GPIO_voidSetPinValue>
 238:	08 95       	ret

0000023a <LCD_clear_screen>:
	GPIO_voidSetPinValue(LCD_Ctrl_PORT ,LCD_EN , 0 );
}

void LCD_clear_screen(void)
{
	LCD_Write_command(Clear_display);
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Write_command>
 240:	08 95       	ret

00000242 <LCD_init>:

#include "lcd.h"

void LCD_init()
{
	LCD_is_busy();
 242:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_is_busy>
	
	//set control port as output
	LCD_Ctrl_Dir_PORT |= (1<<LCD_RS) | (1<<LCD_RW) | (1<<LCD_EN);
 246:	87 b3       	in	r24, 0x17	; 23
 248:	8e 60       	ori	r24, 0x0E	; 14
 24a:	87 bb       	out	0x17, r24	; 23
	LCD_Write_command(Func_set_8bit_2line);
	#endif

	#ifdef Four_bit_mode
	//set data port as output
	LCD_Data_Dir_PORT |= 0xF0;
 24c:	8a b3       	in	r24, 0x1a	; 26
 24e:	80 6f       	ori	r24, 0xF0	; 240
 250:	8a bb       	out	0x1a, r24	; 26
	LCD_clear_screen();
 252:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_clear_screen>
 256:	8f e3       	ldi	r24, 0x3F	; 63
 258:	9c e9       	ldi	r25, 0x9C	; 156
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <LCD_init+0x18>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <LCD_init+0x1e>
 260:	00 00       	nop
	_delay_ms(20);
	LCD_Write_command(0x02);
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Write_command>
	LCD_Write_command(Func_set_4bit_2line);
 268:	88 e2       	ldi	r24, 0x28	; 40
 26a:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Write_command>
	#endif
	//====================================================
	LCD_Write_command(Display_on_cursor_blink);
 26e:	8f e0       	ldi	r24, 0x0F	; 15
 270:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Write_command>
	LCD_Write_command(Entry_mode);
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Write_command>
	LCD_Write_command(Begin_first_row);
 27a:	80 e8       	ldi	r24, 0x80	; 128
 27c:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Write_command>
 280:	08 95       	ret

00000282 <LCD_gotoXY>:
{
	LCD_Write_command(Clear_display);
}

void LCD_gotoXY(uint8_t line, uint8_t position)
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	c8 2f       	mov	r28, r24
 288:	d6 2f       	mov	r29, r22
	if (line == 0) // line 1
 28a:	81 11       	cpse	r24, r1
 28c:	06 c0       	rjmp	.+12     	; 0x29a <LCD_gotoXY+0x18>
	{
		if (position < 16 && position >= 0)
 28e:	60 31       	cpi	r22, 0x10	; 16
 290:	20 f4       	brcc	.+8      	; 0x29a <LCD_gotoXY+0x18>
		LCD_Write_command(0x80 + position);
 292:	80 e8       	ldi	r24, 0x80	; 128
 294:	86 0f       	add	r24, r22
 296:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Write_command>
	}
	if (line == 1) //  line 2
 29a:	c1 30       	cpi	r28, 0x01	; 1
 29c:	31 f4       	brne	.+12     	; 0x2aa <LCD_gotoXY+0x28>
	{
		if (position < 16 && position >= 0)
 29e:	d0 31       	cpi	r29, 0x10	; 16
 2a0:	20 f4       	brcc	.+8      	; 0x2aa <LCD_gotoXY+0x28>
		LCD_Write_command(0xC0 + position);
 2a2:	80 ec       	ldi	r24, 0xC0	; 192
 2a4:	8d 0f       	add	r24, r29
 2a6:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Write_command>
	}
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <LCD_Write_string>:
	
	_delay_ms(5);
	#endif
}
void LCD_Write_string(char* string)
{
 2b0:	ef 92       	push	r14
 2b2:	ff 92       	push	r15
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	7c 01       	movw	r14, r24
	int count =0;
	for(count = 0 ; (string[count]!='\0') ; count++)
 2be:	c0 e0       	ldi	r28, 0x00	; 0
 2c0:	d0 e0       	ldi	r29, 0x00	; 0
 2c2:	15 c0       	rjmp	.+42     	; 0x2ee <LCD_Write_string+0x3e>
	{
		if(count == 16)
 2c4:	c0 31       	cpi	r28, 0x10	; 16
 2c6:	d1 05       	cpc	r29, r1
 2c8:	21 f4       	brne	.+8      	; 0x2d2 <LCD_Write_string+0x22>
		LCD_gotoXY(1,0);
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 41 01 	call	0x282	; 0x282 <LCD_gotoXY>
		
		if(count == 32)
 2d2:	c0 32       	cpi	r28, 0x20	; 32
 2d4:	d1 05       	cpc	r29, r1
 2d6:	31 f4       	brne	.+12     	; 0x2e4 <LCD_Write_string+0x34>
		{
			LCD_clear_screen();
 2d8:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_clear_screen>
			LCD_gotoXY(0,0);
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 41 01 	call	0x282	; 0x282 <LCD_gotoXY>
		}
		
		LCD_Write_char(string[count]);
 2e4:	f8 01       	movw	r30, r16
 2e6:	80 81       	ld	r24, Z
 2e8:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_Write_char>
	#endif
}
void LCD_Write_string(char* string)
{
	int count =0;
	for(count = 0 ; (string[count]!='\0') ; count++)
 2ec:	21 96       	adiw	r28, 0x01	; 1
 2ee:	87 01       	movw	r16, r14
 2f0:	0c 0f       	add	r16, r28
 2f2:	1d 1f       	adc	r17, r29
 2f4:	f8 01       	movw	r30, r16
 2f6:	80 81       	ld	r24, Z
 2f8:	81 11       	cpse	r24, r1
 2fa:	e4 cf       	rjmp	.-56     	; 0x2c4 <LCD_Write_string+0x14>
			LCD_gotoXY(0,0);
		}
		
		LCD_Write_char(string[count]);
	}
}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	ff 90       	pop	r15
 306:	ef 90       	pop	r14
 308:	08 95       	ret

0000030a <main>:

char buf[30];

int main(void)
{	
	UART_Init();
 30a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <UART_Init>
	LCD_init();
 30e:	0e 94 21 01 	call	0x242	; 0x242 <LCD_init>

    while (1) 
    {
		UART_Receive_String(buf, 30);
 312:	6e e1       	ldi	r22, 0x1E	; 30
 314:	80 e6       	ldi	r24, 0x60	; 96
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 a1 02 	call	0x542	; 0x542 <UART_Receive_String>
		LCD_Write_string(buf);
 31c:	80 e6       	ldi	r24, 0x60	; 96
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_Write_string>
 324:	f6 cf       	rjmp	.-20     	; 0x312 <main+0x8>

00000326 <GPIO_voidSetPinDirection>:

#include "GPIO.h"

void GPIO_voidSetPinDirection(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Direction)
{
	if (Copy_u8GroupID <= GPIO_D && Copy_u8PinID <= GPIO_PIN_7
 326:	84 30       	cpi	r24, 0x04	; 4
 328:	08 f0       	brcs	.+2      	; 0x32c <GPIO_voidSetPinDirection+0x6>
 32a:	72 c0       	rjmp	.+228    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 32c:	68 30       	cpi	r22, 0x08	; 8
 32e:	08 f0       	brcs	.+2      	; 0x332 <GPIO_voidSetPinDirection+0xc>
 330:	6f c0       	rjmp	.+222    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
			&& Copy_u8Direction <= GPIO_OUTPUT)
 332:	42 30       	cpi	r20, 0x02	; 2
 334:	08 f0       	brcs	.+2      	; 0x338 <GPIO_voidSetPinDirection+0x12>
 336:	6c c0       	rjmp	.+216    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
	{
        switch(Copy_u8GroupID)
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	01 f1       	breq	.+64     	; 0x37c <GPIO_voidSetPinDirection+0x56>
 33c:	30 f0       	brcs	.+12     	; 0x34a <GPIO_voidSetPinDirection+0x24>
 33e:	82 30       	cpi	r24, 0x02	; 2
 340:	b1 f1       	breq	.+108    	; 0x3ae <GPIO_voidSetPinDirection+0x88>
 342:	83 30       	cpi	r24, 0x03	; 3
 344:	09 f4       	brne	.+2      	; 0x348 <GPIO_voidSetPinDirection+0x22>
 346:	4c c0       	rjmp	.+152    	; 0x3e0 <GPIO_voidSetPinDirection+0xba>
 348:	08 95       	ret
        {
            case GPIO_A:
                if (Copy_u8Direction == GPIO_INPUT)
 34a:	41 11       	cpse	r20, r1
 34c:	0c c0       	rjmp	.+24     	; 0x366 <GPIO_voidSetPinDirection+0x40>
                    DDRA &=~ (1<<Copy_u8PinID);
 34e:	2a b3       	in	r18, 0x1a	; 26
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <GPIO_voidSetPinDirection+0x34>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	6a 95       	dec	r22
 35c:	e2 f7       	brpl	.-8      	; 0x356 <GPIO_voidSetPinDirection+0x30>
 35e:	80 95       	com	r24
 360:	82 23       	and	r24, r18
 362:	8a bb       	out	0x1a, r24	; 26
 364:	08 95       	ret
                else
                    DDRA |= (1<<Copy_u8PinID);
 366:	2a b3       	in	r18, 0x1a	; 26
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <GPIO_voidSetPinDirection+0x4c>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <GPIO_voidSetPinDirection+0x48>
 376:	82 2b       	or	r24, r18
 378:	8a bb       	out	0x1a, r24	; 26
 37a:	08 95       	ret
            break;

            case GPIO_B:
                if (Copy_u8Direction == GPIO_INPUT)
 37c:	41 11       	cpse	r20, r1
 37e:	0c c0       	rjmp	.+24     	; 0x398 <GPIO_voidSetPinDirection+0x72>
                    DDRB &= ~(1<<Copy_u8PinID);
 380:	27 b3       	in	r18, 0x17	; 23
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <GPIO_voidSetPinDirection+0x66>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <GPIO_voidSetPinDirection+0x62>
 390:	80 95       	com	r24
 392:	82 23       	and	r24, r18
 394:	87 bb       	out	0x17, r24	; 23
 396:	08 95       	ret
                else
                    DDRB |= (1<<Copy_u8PinID);
 398:	27 b3       	in	r18, 0x17	; 23
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <GPIO_voidSetPinDirection+0x7e>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <GPIO_voidSetPinDirection+0x7a>
 3a8:	82 2b       	or	r24, r18
 3aa:	87 bb       	out	0x17, r24	; 23
 3ac:	08 95       	ret
            break;

            case GPIO_C:
                if (Copy_u8Direction == GPIO_INPUT)
 3ae:	41 11       	cpse	r20, r1
 3b0:	0c c0       	rjmp	.+24     	; 0x3ca <GPIO_voidSetPinDirection+0xa4>
                    DDRC &= ~(1<<Copy_u8PinID);
 3b2:	24 b3       	in	r18, 0x14	; 20
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <GPIO_voidSetPinDirection+0x98>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <GPIO_voidSetPinDirection+0x94>
 3c2:	80 95       	com	r24
 3c4:	82 23       	and	r24, r18
 3c6:	84 bb       	out	0x14, r24	; 20
 3c8:	08 95       	ret
                else
                    DDRC |= (1<<Copy_u8PinID);
 3ca:	24 b3       	in	r18, 0x14	; 20
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <GPIO_voidSetPinDirection+0xb0>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <GPIO_voidSetPinDirection+0xac>
 3da:	82 2b       	or	r24, r18
 3dc:	84 bb       	out	0x14, r24	; 20
 3de:	08 95       	ret
            break;

            case GPIO_D:
                if (Copy_u8Direction == GPIO_INPUT)
 3e0:	41 11       	cpse	r20, r1
 3e2:	0c c0       	rjmp	.+24     	; 0x3fc <GPIO_voidSetPinDirection+0xd6>
                    DDRD &=~ (1<<Copy_u8PinID);
 3e4:	21 b3       	in	r18, 0x11	; 17
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <GPIO_voidSetPinDirection+0xca>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <GPIO_voidSetPinDirection+0xc6>
 3f4:	80 95       	com	r24
 3f6:	82 23       	and	r24, r18
 3f8:	81 bb       	out	0x11, r24	; 17
 3fa:	08 95       	ret
                else
                    DDRD |= (1<<Copy_u8PinID);
 3fc:	21 b3       	in	r18, 0x11	; 17
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	6a 95       	dec	r22
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	82 2b       	or	r24, r18
 40e:	81 bb       	out	0x11, r24	; 17
 410:	08 95       	ret

00000412 <GPIO_voidSetPinValue>:

}

void GPIO_voidSetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    if (Copy_u8GroupID <= GPIO_D && Copy_u8PinID <= GPIO_PIN_7
 412:	84 30       	cpi	r24, 0x04	; 4
 414:	08 f0       	brcs	.+2      	; 0x418 <GPIO_voidSetPinValue+0x6>
 416:	72 c0       	rjmp	.+228    	; 0x4fc <GPIO_voidSetPinValue+0xea>
 418:	68 30       	cpi	r22, 0x08	; 8
 41a:	08 f0       	brcs	.+2      	; 0x41e <GPIO_voidSetPinValue+0xc>
 41c:	6f c0       	rjmp	.+222    	; 0x4fc <GPIO_voidSetPinValue+0xea>
			&& Copy_u8Value <= GPIO_HIGH)
 41e:	42 30       	cpi	r20, 0x02	; 2
 420:	08 f0       	brcs	.+2      	; 0x424 <GPIO_voidSetPinValue+0x12>
 422:	6c c0       	rjmp	.+216    	; 0x4fc <GPIO_voidSetPinValue+0xea>
	{
        switch(Copy_u8GroupID)
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	01 f1       	breq	.+64     	; 0x468 <GPIO_voidSetPinValue+0x56>
 428:	30 f0       	brcs	.+12     	; 0x436 <GPIO_voidSetPinValue+0x24>
 42a:	82 30       	cpi	r24, 0x02	; 2
 42c:	b1 f1       	breq	.+108    	; 0x49a <GPIO_voidSetPinValue+0x88>
 42e:	83 30       	cpi	r24, 0x03	; 3
 430:	09 f4       	brne	.+2      	; 0x434 <GPIO_voidSetPinValue+0x22>
 432:	4c c0       	rjmp	.+152    	; 0x4cc <GPIO_voidSetPinValue+0xba>
 434:	08 95       	ret
        {
            case GPIO_A:
                if (Copy_u8Value == GPIO_LOW)
 436:	41 11       	cpse	r20, r1
 438:	0c c0       	rjmp	.+24     	; 0x452 <GPIO_voidSetPinValue+0x40>
                    PORTA &= ~(1<<Copy_u8PinID);
 43a:	2b b3       	in	r18, 0x1b	; 27
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <GPIO_voidSetPinValue+0x34>
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	6a 95       	dec	r22
 448:	e2 f7       	brpl	.-8      	; 0x442 <GPIO_voidSetPinValue+0x30>
 44a:	80 95       	com	r24
 44c:	82 23       	and	r24, r18
 44e:	8b bb       	out	0x1b, r24	; 27
 450:	08 95       	ret
                else
                    PORTA |= (1<<Copy_u8PinID);
 452:	2b b3       	in	r18, 0x1b	; 27
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 c0       	rjmp	.+4      	; 0x45e <GPIO_voidSetPinValue+0x4c>
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	6a 95       	dec	r22
 460:	e2 f7       	brpl	.-8      	; 0x45a <GPIO_voidSetPinValue+0x48>
 462:	82 2b       	or	r24, r18
 464:	8b bb       	out	0x1b, r24	; 27
 466:	08 95       	ret
            break;

            case GPIO_B:
                if (Copy_u8Value == GPIO_LOW)
 468:	41 11       	cpse	r20, r1
 46a:	0c c0       	rjmp	.+24     	; 0x484 <GPIO_voidSetPinValue+0x72>
                    PORTB &= ~(1<<Copy_u8PinID);
 46c:	28 b3       	in	r18, 0x18	; 24
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <GPIO_voidSetPinValue+0x66>
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	6a 95       	dec	r22
 47a:	e2 f7       	brpl	.-8      	; 0x474 <GPIO_voidSetPinValue+0x62>
 47c:	80 95       	com	r24
 47e:	82 23       	and	r24, r18
 480:	88 bb       	out	0x18, r24	; 24
 482:	08 95       	ret
                else
                    PORTB |= (1<<Copy_u8PinID);
 484:	28 b3       	in	r18, 0x18	; 24
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <GPIO_voidSetPinValue+0x7e>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	6a 95       	dec	r22
 492:	e2 f7       	brpl	.-8      	; 0x48c <GPIO_voidSetPinValue+0x7a>
 494:	82 2b       	or	r24, r18
 496:	88 bb       	out	0x18, r24	; 24
 498:	08 95       	ret
            break;

            case GPIO_C:
                if (Copy_u8Value == GPIO_LOW)
 49a:	41 11       	cpse	r20, r1
 49c:	0c c0       	rjmp	.+24     	; 0x4b6 <GPIO_voidSetPinValue+0xa4>
                    PORTC &= ~(1<<Copy_u8PinID);
 49e:	25 b3       	in	r18, 0x15	; 21
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <GPIO_voidSetPinValue+0x98>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	6a 95       	dec	r22
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <GPIO_voidSetPinValue+0x94>
 4ae:	80 95       	com	r24
 4b0:	82 23       	and	r24, r18
 4b2:	85 bb       	out	0x15, r24	; 21
 4b4:	08 95       	ret
                else
                    PORTC |= (1<<Copy_u8PinID);
 4b6:	25 b3       	in	r18, 0x15	; 21
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <GPIO_voidSetPinValue+0xb0>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <GPIO_voidSetPinValue+0xac>
 4c6:	82 2b       	or	r24, r18
 4c8:	85 bb       	out	0x15, r24	; 21
 4ca:	08 95       	ret
            break;

            case GPIO_D:
                if (Copy_u8Value == GPIO_LOW)
 4cc:	41 11       	cpse	r20, r1
 4ce:	0c c0       	rjmp	.+24     	; 0x4e8 <GPIO_voidSetPinValue+0xd6>
                    PORTD &= ~(1<<Copy_u8PinID);
 4d0:	22 b3       	in	r18, 0x12	; 18
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <GPIO_voidSetPinValue+0xca>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	6a 95       	dec	r22
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <GPIO_voidSetPinValue+0xc6>
 4e0:	80 95       	com	r24
 4e2:	82 23       	and	r24, r18
 4e4:	82 bb       	out	0x12, r24	; 18
 4e6:	08 95       	ret
                else
                    PORTD |= (1<<Copy_u8PinID);
 4e8:	22 b3       	in	r18, 0x12	; 18
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <GPIO_voidSetPinValue+0xe2>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	6a 95       	dec	r22
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <GPIO_voidSetPinValue+0xde>
 4f8:	82 2b       	or	r24, r18
 4fa:	82 bb       	out	0x12, r24	; 18
 4fc:	08 95       	ret

000004fe <UART_Init>:
}

void UART_Send_Char(u8 data)
{
	while(!(GET_BIT(UCSRA,UDRE)));
	UDR = data;
 4fe:	83 e3       	ldi	r24, 0x33	; 51
 500:	89 b9       	out	0x09, r24	; 9
 502:	8b b1       	in	r24, 0x0b	; 11
 504:	8d 7f       	andi	r24, 0xFD	; 253
 506:	8b b9       	out	0x0b, r24	; 11
 508:	80 b5       	in	r24, 0x20	; 32
 50a:	8f 7b       	andi	r24, 0xBF	; 191
 50c:	80 bd       	out	0x20, r24	; 32
 50e:	80 b5       	in	r24, 0x20	; 32
 510:	8f 7e       	andi	r24, 0xEF	; 239
 512:	80 bd       	out	0x20, r24	; 32
 514:	80 b5       	in	r24, 0x20	; 32
 516:	8f 7d       	andi	r24, 0xDF	; 223
 518:	80 bd       	out	0x20, r24	; 32
 51a:	8a b1       	in	r24, 0x0a	; 10
 51c:	8b 7f       	andi	r24, 0xFB	; 251
 51e:	8a b9       	out	0x0a, r24	; 10
 520:	80 b5       	in	r24, 0x20	; 32
 522:	84 60       	ori	r24, 0x04	; 4
 524:	80 bd       	out	0x20, r24	; 32
 526:	80 b5       	in	r24, 0x20	; 32
 528:	82 60       	ori	r24, 0x02	; 2
 52a:	80 bd       	out	0x20, r24	; 32
 52c:	8a b1       	in	r24, 0x0a	; 10
 52e:	88 60       	ori	r24, 0x08	; 8
 530:	8a b9       	out	0x0a, r24	; 10
 532:	8a b1       	in	r24, 0x0a	; 10
 534:	80 61       	ori	r24, 0x10	; 16
 536:	8a b9       	out	0x0a, r24	; 10
 538:	08 95       	ret

0000053a <UART_Receive_Char>:
}

u8 UART_Receive_Char()
{
	while(!(GET_BIT(UCSRA,RXC)));
 53a:	5f 9b       	sbis	0x0b, 7	; 11
 53c:	fe cf       	rjmp	.-4      	; 0x53a <UART_Receive_Char>
	return UDR;
 53e:	8c b1       	in	r24, 0x0c	; 12
}
 540:	08 95       	ret

00000542 <UART_Receive_String>:
void UART_Receive_String(char * buf, u8 size)
{
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	8c 01       	movw	r16, r24
 54c:	d6 2f       	mov	r29, r22
	u8 i = 0;
 54e:	c0 e0       	ldi	r28, 0x00	; 0
	while(i<size)
 550:	09 c0       	rjmp	.+18     	; 0x564 <UART_Receive_String+0x22>
	{
		buf[i] = UART_Receive_Char();
 552:	0e 94 9d 02 	call	0x53a	; 0x53a <UART_Receive_Char>
 556:	f8 01       	movw	r30, r16
 558:	ec 0f       	add	r30, r28
 55a:	f1 1d       	adc	r31, r1
 55c:	80 83       	st	Z, r24
		if (buf[i] == 13) break;
 55e:	8d 30       	cpi	r24, 0x0D	; 13
 560:	19 f0       	breq	.+6      	; 0x568 <UART_Receive_String+0x26>
		i++;
 562:	cf 5f       	subi	r28, 0xFF	; 255
	return UDR;
}
void UART_Receive_String(char * buf, u8 size)
{
	u8 i = 0;
	while(i<size)
 564:	cd 17       	cp	r28, r29
 566:	a8 f3       	brcs	.-22     	; 0x552 <UART_Receive_String+0x10>
	{
		buf[i] = UART_Receive_Char();
		if (buf[i] == 13) break;
		i++;
	}
	buf[i] = '\0';
 568:	f8 01       	movw	r30, r16
 56a:	ec 0f       	add	r30, r28
 56c:	f1 1d       	adc	r31, r1
 56e:	10 82       	st	Z, r1
	
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	08 95       	ret

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
