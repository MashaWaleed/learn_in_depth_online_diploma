
Drivers2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d74  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000ea4  08000ea4  00010ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ecc  08000ecc  00010ed4  2**0
                  CONTENTS
  4 .ARM          00000000  08000ecc  08000ecc  00010ed4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ecc  08000ed4  00010ed4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ecc  08000ecc  00010ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ed0  08000ed0  00010ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ed4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000ed4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000ed4  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ed4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010efd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000125e  00000000  00000000  00010f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005e6  00000000  00000000  0001219e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000994  00000000  00000000  00012784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001a0  00000000  00000000  00013118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000158  00000000  00000000  000132b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002511  00000000  00000000  00013410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001fc1  00000000  00000000  00015921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000971e  00000000  00000000  000178e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000518  00000000  00000000  00021000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e8c 	.word	0x08000e8c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e8c 	.word	0x08000e8c

08000170 <Enable_NVIC>:
 * =======================================================================================
 * 										GENERIC FUNCTIONS
 * =======================================================================================
 */
void Enable_NVIC(uint16_t IRQ)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b0f      	cmp	r3, #15
 800017e:	d854      	bhi.n	800022a <Enable_NVIC+0xba>
 8000180:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <Enable_NVIC+0x18>)
 8000182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000186:	bf00      	nop
 8000188:	080001c9 	.word	0x080001c9
 800018c:	080001d7 	.word	0x080001d7
 8000190:	080001e5 	.word	0x080001e5
 8000194:	080001f3 	.word	0x080001f3
 8000198:	08000201 	.word	0x08000201
 800019c:	0800020f 	.word	0x0800020f
 80001a0:	0800020f 	.word	0x0800020f
 80001a4:	0800020f 	.word	0x0800020f
 80001a8:	0800020f 	.word	0x0800020f
 80001ac:	0800020f 	.word	0x0800020f
 80001b0:	0800021d 	.word	0x0800021d
 80001b4:	0800021d 	.word	0x0800021d
 80001b8:	0800021d 	.word	0x0800021d
 80001bc:	0800021d 	.word	0x0800021d
 80001c0:	0800021d 	.word	0x0800021d
 80001c4:	0800021d 	.word	0x0800021d
		case EXTI0:
			NVIC_IRQ6_EXTI0_Enable();
 80001c8:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <Enable_NVIC+0xc4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a19      	ldr	r2, [pc, #100]	; (8000234 <Enable_NVIC+0xc4>)
 80001ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d2:	6013      	str	r3, [r2, #0]
			break;
 80001d4:	e029      	b.n	800022a <Enable_NVIC+0xba>
		case EXTI1:
			NVIC_IRQ7_EXTI1_Enable();
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <Enable_NVIC+0xc4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a16      	ldr	r2, [pc, #88]	; (8000234 <Enable_NVIC+0xc4>)
 80001dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001e0:	6013      	str	r3, [r2, #0]
			break;
 80001e2:	e022      	b.n	800022a <Enable_NVIC+0xba>
		case EXTI2:
			NVIC_IRQ8_EXTI2_Enable();
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <Enable_NVIC+0xc4>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	; (8000234 <Enable_NVIC+0xc4>)
 80001ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001ee:	6013      	str	r3, [r2, #0]
			break;
 80001f0:	e01b      	b.n	800022a <Enable_NVIC+0xba>
		case EXTI3:
			NVIC_IRQ9_EXTI3_Enable();
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <Enable_NVIC+0xc4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <Enable_NVIC+0xc4>)
 80001f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fc:	6013      	str	r3, [r2, #0]
			break;
 80001fe:	e014      	b.n	800022a <Enable_NVIC+0xba>
		case EXTI4:
			NVIC_IRQ10_EXTI4_Enable();
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <Enable_NVIC+0xc4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <Enable_NVIC+0xc4>)
 8000206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800020a:	6013      	str	r3, [r2, #0]
			break;
 800020c:	e00d      	b.n	800022a <Enable_NVIC+0xba>
		case EXTI5:
		case EXTI6:
		case EXTI7:
		case EXTI8:
		case EXTI9:
			NVIC_IRQ23_EXTI5_9_Enable();
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <Enable_NVIC+0xc4>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a08      	ldr	r2, [pc, #32]	; (8000234 <Enable_NVIC+0xc4>)
 8000214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000218:	6013      	str	r3, [r2, #0]
			break;
 800021a:	e006      	b.n	800022a <Enable_NVIC+0xba>
		case EXTI11:
		case EXTI12:
		case EXTI13:
		case EXTI14:
		case EXTI15:
			NVIC_IRQ40_EXTI10_15_Enable();
 800021c:	4b05      	ldr	r3, [pc, #20]	; (8000234 <Enable_NVIC+0xc4>)
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	4a04      	ldr	r2, [pc, #16]	; (8000234 <Enable_NVIC+0xc4>)
 8000222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000226:	6053      	str	r3, [r2, #4]
			break;
 8000228:	bf00      	nop
		}
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100

08000238 <Disable_NVIC>:
void Disable_NVIC(uint16_t IRQ)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000242:	88fb      	ldrh	r3, [r7, #6]
 8000244:	2b0f      	cmp	r3, #15
 8000246:	d862      	bhi.n	800030e <Disable_NVIC+0xd6>
 8000248:	a201      	add	r2, pc, #4	; (adr r2, 8000250 <Disable_NVIC+0x18>)
 800024a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024e:	bf00      	nop
 8000250:	08000291 	.word	0x08000291
 8000254:	080002a3 	.word	0x080002a3
 8000258:	080002b5 	.word	0x080002b5
 800025c:	080002c7 	.word	0x080002c7
 8000260:	080002d9 	.word	0x080002d9
 8000264:	080002eb 	.word	0x080002eb
 8000268:	080002eb 	.word	0x080002eb
 800026c:	080002eb 	.word	0x080002eb
 8000270:	080002eb 	.word	0x080002eb
 8000274:	080002eb 	.word	0x080002eb
 8000278:	080002fd 	.word	0x080002fd
 800027c:	080002fd 	.word	0x080002fd
 8000280:	080002fd 	.word	0x080002fd
 8000284:	080002fd 	.word	0x080002fd
 8000288:	080002fd 	.word	0x080002fd
 800028c:	080002fd 	.word	0x080002fd
		{
		case EXTI0:
			NVIC_IRQ6_EXTI0_Disable();
 8000290:	4b21      	ldr	r3, [pc, #132]	; (8000318 <Disable_NVIC+0xe0>)
 8000292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000296:	4a20      	ldr	r2, [pc, #128]	; (8000318 <Disable_NVIC+0xe0>)
 8000298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
			break;
 80002a0:	e035      	b.n	800030e <Disable_NVIC+0xd6>

		case EXTI1:
			NVIC_IRQ7_EXTI1_Disable();
 80002a2:	4b1d      	ldr	r3, [pc, #116]	; (8000318 <Disable_NVIC+0xe0>)
 80002a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002a8:	4a1b      	ldr	r2, [pc, #108]	; (8000318 <Disable_NVIC+0xe0>)
 80002aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
			break;
 80002b2:	e02c      	b.n	800030e <Disable_NVIC+0xd6>

		case EXTI2:
			NVIC_IRQ8_EXTI2_Disable();
 80002b4:	4b18      	ldr	r3, [pc, #96]	; (8000318 <Disable_NVIC+0xe0>)
 80002b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002ba:	4a17      	ldr	r2, [pc, #92]	; (8000318 <Disable_NVIC+0xe0>)
 80002bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
			break;
 80002c4:	e023      	b.n	800030e <Disable_NVIC+0xd6>

		case EXTI3:
			NVIC_IRQ9_EXTI3_Disable();
 80002c6:	4b14      	ldr	r3, [pc, #80]	; (8000318 <Disable_NVIC+0xe0>)
 80002c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002cc:	4a12      	ldr	r2, [pc, #72]	; (8000318 <Disable_NVIC+0xe0>)
 80002ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002d2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
			break;
 80002d6:	e01a      	b.n	800030e <Disable_NVIC+0xd6>

		case EXTI4:
			NVIC_IRQ10_EXTI4_Disable();
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <Disable_NVIC+0xe0>)
 80002da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002de:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <Disable_NVIC+0xe0>)
 80002e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
			break;
 80002e8:	e011      	b.n	800030e <Disable_NVIC+0xd6>
		case EXTI5:
		case EXTI6:
		case EXTI7:
		case EXTI8:
		case EXTI9:
			NVIC_IRQ23_EXTI5_9_Disable();
 80002ea:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <Disable_NVIC+0xe0>)
 80002ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002f0:	4a09      	ldr	r2, [pc, #36]	; (8000318 <Disable_NVIC+0xe0>)
 80002f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
			break;
 80002fa:	e008      	b.n	800030e <Disable_NVIC+0xd6>
		case EXTI11:
		case EXTI12:
		case EXTI13:
		case EXTI14:
		case EXTI15:
			NVIC_IRQ40_EXTI10_15_Disable();
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <Disable_NVIC+0xe0>)
 80002fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000302:	4a05      	ldr	r2, [pc, #20]	; (8000318 <Disable_NVIC+0xe0>)
 8000304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000308:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
			break;
 800030c:	bf00      	nop
		}
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	e000e100 	.word	0xe000e100

0800031c <MCAL_EXTI_GPIO_Init>:
 * 					- but LQFP48 package has only GPIO A,B,Part of C/D exported as external PINS from the MCU
 * 					- Also Mandatory to enable RCC clock for AFIO and corresponding GPIO
 */

void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t * EXTI_CFG)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	MCAL_EXTI_GPIO_Update(EXTI_CFG);
 8000324:	6878      	ldr	r0, [r7, #4]
 8000326:	f000 f805 	bl	8000334 <MCAL_EXTI_GPIO_Update>
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <MCAL_EXTI_GPIO_Update>:




void MCAL_EXTI_GPIO_Update(EXTI_PinConfig_t * EXTI_CFG)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	//CONFIG PIN to be FLOATING INPUT

	GPIO_PinConfig_t PinCfg;
	PinCfg.GPIO_PinNumber = EXTI_CFG->EXTI_Pin.GPIO_Pin;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	891b      	ldrh	r3, [r3, #8]
 8000340:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000342:	2301      	movs	r3, #1
 8000344:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_CFG->EXTI_Pin.GPIO_Port, &PinCfg);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	f107 0208 	add.w	r2, r7, #8
 800034e:	4611      	mov	r1, r2
 8000350:	4618      	mov	r0, r3
 8000352:	f000 fa99 	bl	8000888 <MCAL_GPIO_Init>


	//Set AFIO \ update the routing
	uint8_t AFIO_EXTICR_Index = EXTI_CFG->EXTI_Pin.EXTI_LineNumber/4;              //afio reg
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	881b      	ldrh	r3, [r3, #0]
 800035a:	089b      	lsrs	r3, r3, #2
 800035c:	b29b      	uxth	r3, r3
 800035e:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Position = (EXTI_CFG->EXTI_Pin.EXTI_LineNumber%4) * 4;    //line count in reg :)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	881b      	ldrh	r3, [r3, #0]
 8000364:	b2db      	uxtb	r3, r3
 8000366:	f003 0303 	and.w	r3, r3, #3
 800036a:	b2db      	uxtb	r3, r3
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	73bb      	strb	r3, [r7, #14]

	//clear then update the  4 bit first
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF<<AFIO_EXTICR_Position);
 8000370:	4a6b      	ldr	r2, [pc, #428]	; (8000520 <MCAL_EXTI_GPIO_Update+0x1ec>)
 8000372:	7bfb      	ldrb	r3, [r7, #15]
 8000374:	3302      	adds	r3, #2
 8000376:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800037a:	7bbb      	ldrb	r3, [r7, #14]
 800037c:	210f      	movs	r1, #15
 800037e:	fa01 f303 	lsl.w	r3, r1, r3
 8000382:	43db      	mvns	r3, r3
 8000384:	4618      	mov	r0, r3
 8000386:	4966      	ldr	r1, [pc, #408]	; (8000520 <MCAL_EXTI_GPIO_Update+0x1ec>)
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	4002      	ands	r2, r0
 800038c:	3302      	adds	r3, #2
 800038e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_CFG->EXTI_Pin.GPIO_Port) & 0xF)<<AFIO_EXTICR_Position);
 8000392:	4a63      	ldr	r2, [pc, #396]	; (8000520 <MCAL_EXTI_GPIO_Update+0x1ec>)
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	3302      	adds	r3, #2
 8000398:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	4960      	ldr	r1, [pc, #384]	; (8000524 <MCAL_EXTI_GPIO_Update+0x1f0>)
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d016      	beq.n	80003d4 <MCAL_EXTI_GPIO_Update+0xa0>
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	495f      	ldr	r1, [pc, #380]	; (8000528 <MCAL_EXTI_GPIO_Update+0x1f4>)
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d00f      	beq.n	80003d0 <MCAL_EXTI_GPIO_Update+0x9c>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	495d      	ldr	r1, [pc, #372]	; (800052c <MCAL_EXTI_GPIO_Update+0x1f8>)
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d008      	beq.n	80003cc <MCAL_EXTI_GPIO_Update+0x98>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	495c      	ldr	r1, [pc, #368]	; (8000530 <MCAL_EXTI_GPIO_Update+0x1fc>)
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d101      	bne.n	80003c8 <MCAL_EXTI_GPIO_Update+0x94>
 80003c4:	2303      	movs	r3, #3
 80003c6:	e006      	b.n	80003d6 <MCAL_EXTI_GPIO_Update+0xa2>
 80003c8:	2300      	movs	r3, #0
 80003ca:	e004      	b.n	80003d6 <MCAL_EXTI_GPIO_Update+0xa2>
 80003cc:	2302      	movs	r3, #2
 80003ce:	e002      	b.n	80003d6 <MCAL_EXTI_GPIO_Update+0xa2>
 80003d0:	2301      	movs	r3, #1
 80003d2:	e000      	b.n	80003d6 <MCAL_EXTI_GPIO_Update+0xa2>
 80003d4:	2300      	movs	r3, #0
 80003d6:	7bb9      	ldrb	r1, [r7, #14]
 80003d8:	408b      	lsls	r3, r1
 80003da:	4618      	mov	r0, r3
 80003dc:	4950      	ldr	r1, [pc, #320]	; (8000520 <MCAL_EXTI_GPIO_Update+0x1ec>)
 80003de:	7bfb      	ldrb	r3, [r7, #15]
 80003e0:	4302      	orrs	r2, r0
 80003e2:	3302      	adds	r3, #2
 80003e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//clear rise and fall
	EXTI->RTSR &= ~(1<<EXTI_CFG->EXTI_Pin.EXTI_LineNumber);
 80003e8:	4b52      	ldr	r3, [pc, #328]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	8812      	ldrh	r2, [r2, #0]
 80003f0:	4611      	mov	r1, r2
 80003f2:	2201      	movs	r2, #1
 80003f4:	408a      	lsls	r2, r1
 80003f6:	43d2      	mvns	r2, r2
 80003f8:	4611      	mov	r1, r2
 80003fa:	4a4e      	ldr	r2, [pc, #312]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 80003fc:	400b      	ands	r3, r1
 80003fe:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<<EXTI_CFG->EXTI_Pin.EXTI_LineNumber);
 8000400:	4b4c      	ldr	r3, [pc, #304]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 8000402:	68db      	ldr	r3, [r3, #12]
 8000404:	687a      	ldr	r2, [r7, #4]
 8000406:	8812      	ldrh	r2, [r2, #0]
 8000408:	4611      	mov	r1, r2
 800040a:	2201      	movs	r2, #1
 800040c:	408a      	lsls	r2, r1
 800040e:	43d2      	mvns	r2, r2
 8000410:	4611      	mov	r1, r2
 8000412:	4a48      	ldr	r2, [pc, #288]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 8000414:	400b      	ands	r3, r1
 8000416:	60d3      	str	r3, [r2, #12]

	//rising or falling ?
	if(EXTI_CFG->TriggerCase == EXTI_TriggerRising)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	7b1b      	ldrb	r3, [r3, #12]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d117      	bne.n	8000450 <MCAL_EXTI_GPIO_Update+0x11c>
	{
		EXTI->RTSR |=  (1<<EXTI_CFG->EXTI_Pin.EXTI_LineNumber);
 8000420:	4b44      	ldr	r3, [pc, #272]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	8812      	ldrh	r2, [r2, #0]
 8000428:	4611      	mov	r1, r2
 800042a:	2201      	movs	r2, #1
 800042c:	408a      	lsls	r2, r1
 800042e:	4611      	mov	r1, r2
 8000430:	4a40      	ldr	r2, [pc, #256]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 8000432:	430b      	orrs	r3, r1
 8000434:	6093      	str	r3, [r2, #8]
		EXTI->FTSR &= ~(1<<EXTI_CFG->EXTI_Pin.EXTI_LineNumber);
 8000436:	4b3f      	ldr	r3, [pc, #252]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	8812      	ldrh	r2, [r2, #0]
 800043e:	4611      	mov	r1, r2
 8000440:	2201      	movs	r2, #1
 8000442:	408a      	lsls	r2, r1
 8000444:	43d2      	mvns	r2, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a3a      	ldr	r2, [pc, #232]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 800044a:	400b      	ands	r3, r1
 800044c:	60d3      	str	r3, [r2, #12]
 800044e:	e035      	b.n	80004bc <MCAL_EXTI_GPIO_Update+0x188>
	}
	else if(EXTI_CFG->TriggerCase == EXTI_TriggerFalling)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	7b1b      	ldrb	r3, [r3, #12]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d117      	bne.n	8000488 <MCAL_EXTI_GPIO_Update+0x154>
	{
		EXTI->RTSR &= ~(1<<EXTI_CFG->EXTI_Pin.EXTI_LineNumber);
 8000458:	4b36      	ldr	r3, [pc, #216]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	8812      	ldrh	r2, [r2, #0]
 8000460:	4611      	mov	r1, r2
 8000462:	2201      	movs	r2, #1
 8000464:	408a      	lsls	r2, r1
 8000466:	43d2      	mvns	r2, r2
 8000468:	4611      	mov	r1, r2
 800046a:	4a32      	ldr	r2, [pc, #200]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 800046c:	400b      	ands	r3, r1
 800046e:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_CFG->EXTI_Pin.EXTI_LineNumber);
 8000470:	4b30      	ldr	r3, [pc, #192]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	8812      	ldrh	r2, [r2, #0]
 8000478:	4611      	mov	r1, r2
 800047a:	2201      	movs	r2, #1
 800047c:	408a      	lsls	r2, r1
 800047e:	4611      	mov	r1, r2
 8000480:	4a2c      	ldr	r2, [pc, #176]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 8000482:	430b      	orrs	r3, r1
 8000484:	60d3      	str	r3, [r2, #12]
 8000486:	e019      	b.n	80004bc <MCAL_EXTI_GPIO_Update+0x188>
	}
	else if(EXTI_CFG->TriggerCase == EXTI_TriggerRisingAndFalling)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	7b1b      	ldrb	r3, [r3, #12]
 800048c:	2b02      	cmp	r3, #2
 800048e:	d115      	bne.n	80004bc <MCAL_EXTI_GPIO_Update+0x188>
	{
		EXTI->RTSR |= (1<<EXTI_CFG->EXTI_Pin.EXTI_LineNumber);
 8000490:	4b28      	ldr	r3, [pc, #160]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	8812      	ldrh	r2, [r2, #0]
 8000498:	4611      	mov	r1, r2
 800049a:	2201      	movs	r2, #1
 800049c:	408a      	lsls	r2, r1
 800049e:	4611      	mov	r1, r2
 80004a0:	4a24      	ldr	r2, [pc, #144]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 80004a2:	430b      	orrs	r3, r1
 80004a4:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_CFG->EXTI_Pin.EXTI_LineNumber);
 80004a6:	4b23      	ldr	r3, [pc, #140]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	8812      	ldrh	r2, [r2, #0]
 80004ae:	4611      	mov	r1, r2
 80004b0:	2201      	movs	r2, #1
 80004b2:	408a      	lsls	r2, r1
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a1f      	ldr	r2, [pc, #124]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 80004b8:	430b      	orrs	r3, r1
 80004ba:	60d3      	str	r3, [r2, #12]
	}

	//UPDATE IRQ CALLBACK
	GP_IRQ_Callback[EXTI_CFG->EXTI_Pin.EXTI_LineNumber] = EXTI_CFG->P_IRQ_CallBack;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	4619      	mov	r1, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	691b      	ldr	r3, [r3, #16]
 80004c6:	4a1c      	ldr	r2, [pc, #112]	; (8000538 <MCAL_EXTI_GPIO_Update+0x204>)
 80004c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//EN/DIS IRQ
	if(EXTI_CFG->IRQ_EN == EXTI_IRQ_Enable)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	7b5b      	ldrb	r3, [r3, #13]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d110      	bne.n	80004f6 <MCAL_EXTI_GPIO_Update+0x1c2>
	{
		SET_BIT(EXTI->IMR, EXTI_CFG->EXTI_Pin.EXTI_LineNumber);
 80004d4:	4b17      	ldr	r3, [pc, #92]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	8812      	ldrh	r2, [r2, #0]
 80004dc:	4611      	mov	r1, r2
 80004de:	2201      	movs	r2, #1
 80004e0:	408a      	lsls	r2, r1
 80004e2:	4611      	mov	r1, r2
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 80004e6:	430b      	orrs	r3, r1
 80004e8:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_CFG->EXTI_Pin.EXTI_LineNumber);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	881b      	ldrh	r3, [r3, #0]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff fe3e 	bl	8000170 <Enable_NVIC>
	else
	{
		CLR_BIT(EXTI->IMR, EXTI_CFG->EXTI_Pin.EXTI_LineNumber);
		Disable_NVIC(EXTI_CFG->EXTI_Pin.EXTI_LineNumber);
	}
}
 80004f4:	e010      	b.n	8000518 <MCAL_EXTI_GPIO_Update+0x1e4>
		CLR_BIT(EXTI->IMR, EXTI_CFG->EXTI_Pin.EXTI_LineNumber);
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	8812      	ldrh	r2, [r2, #0]
 80004fe:	4611      	mov	r1, r2
 8000500:	2201      	movs	r2, #1
 8000502:	408a      	lsls	r2, r1
 8000504:	43d2      	mvns	r2, r2
 8000506:	4611      	mov	r1, r2
 8000508:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <MCAL_EXTI_GPIO_Update+0x200>)
 800050a:	400b      	ands	r3, r1
 800050c:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_CFG->EXTI_Pin.EXTI_LineNumber);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff fe90 	bl	8000238 <Disable_NVIC>
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40010000 	.word	0x40010000
 8000524:	40010800 	.word	0x40010800
 8000528:	40010c00 	.word	0x40010c00
 800052c:	40011000 	.word	0x40011000
 8000530:	40011400 	.word	0x40011400
 8000534:	40010400 	.word	0x40010400
 8000538:	2000001c 	.word	0x2000001c

0800053c <EXTI0_IRQHandler>:
 * 										ISR FUNCTIONS
 * =======================================================================================
 */


void EXTI0_IRQHandler(void){
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<0;
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <EXTI0_IRQHandler+0x14>)
 8000542:	2201      	movs	r2, #1
 8000544:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[0]();
 8000546:	4b03      	ldr	r3, [pc, #12]	; (8000554 <EXTI0_IRQHandler+0x18>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4798      	blx	r3
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40010400 	.word	0x40010400
 8000554:	2000001c 	.word	0x2000001c

08000558 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<1;
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <EXTI1_IRQHandler+0x14>)
 800055e:	2202      	movs	r2, #2
 8000560:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[1]();
 8000562:	4b03      	ldr	r3, [pc, #12]	; (8000570 <EXTI1_IRQHandler+0x18>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	4798      	blx	r3
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40010400 	.word	0x40010400
 8000570:	2000001c 	.word	0x2000001c

08000574 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<2;
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <EXTI2_IRQHandler+0x14>)
 800057a:	2204      	movs	r2, #4
 800057c:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[2]();
 800057e:	4b03      	ldr	r3, [pc, #12]	; (800058c <EXTI2_IRQHandler+0x18>)
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	4798      	blx	r3
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40010400 	.word	0x40010400
 800058c:	2000001c 	.word	0x2000001c

08000590 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<3;
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <EXTI3_IRQHandler+0x14>)
 8000596:	2208      	movs	r2, #8
 8000598:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[3]();
 800059a:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <EXTI3_IRQHandler+0x18>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	4798      	blx	r3
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40010400 	.word	0x40010400
 80005a8:	2000001c 	.word	0x2000001c

080005ac <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	//clear the corresponding pending bit
	EXTI->PR = 1<<4;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <EXTI4_IRQHandler+0x14>)
 80005b2:	2210      	movs	r2, #16
 80005b4:	615a      	str	r2, [r3, #20]
	//callback funtion
	GP_IRQ_Callback[4]();
 80005b6:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <EXTI4_IRQHandler+0x18>)
 80005b8:	691b      	ldr	r3, [r3, #16]
 80005ba:	4798      	blx	r3
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40010400 	.word	0x40010400
 80005c4:	2000001c 	.word	0x2000001c

080005c8 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0

	if(EXTI->PR & 1<<5) { EXTI->PR  = 1<<5;   GP_IRQ_Callback[5](); }
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <EXTI9_5_IRQHandler+0x84>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	f003 0320 	and.w	r3, r3, #32
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d005      	beq.n	80005e4 <EXTI9_5_IRQHandler+0x1c>
 80005d8:	4b1c      	ldr	r3, [pc, #112]	; (800064c <EXTI9_5_IRQHandler+0x84>)
 80005da:	2220      	movs	r2, #32
 80005dc:	615a      	str	r2, [r3, #20]
 80005de:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <EXTI9_5_IRQHandler+0x88>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR  = 1<<6;   GP_IRQ_Callback[6](); }
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <EXTI9_5_IRQHandler+0x84>)
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d005      	beq.n	80005fc <EXTI9_5_IRQHandler+0x34>
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <EXTI9_5_IRQHandler+0x84>)
 80005f2:	2240      	movs	r2, #64	; 0x40
 80005f4:	615a      	str	r2, [r3, #20]
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <EXTI9_5_IRQHandler+0x88>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR  = 1<<7;   GP_IRQ_Callback[7](); }
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <EXTI9_5_IRQHandler+0x84>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000604:	2b00      	cmp	r3, #0
 8000606:	d005      	beq.n	8000614 <EXTI9_5_IRQHandler+0x4c>
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <EXTI9_5_IRQHandler+0x84>)
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	615a      	str	r2, [r3, #20]
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <EXTI9_5_IRQHandler+0x88>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR  = 1<<8;   GP_IRQ_Callback[8](); }
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <EXTI9_5_IRQHandler+0x84>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800061c:	2b00      	cmp	r3, #0
 800061e:	d006      	beq.n	800062e <EXTI9_5_IRQHandler+0x66>
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <EXTI9_5_IRQHandler+0x84>)
 8000622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000626:	615a      	str	r2, [r3, #20]
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <EXTI9_5_IRQHandler+0x88>)
 800062a:	6a1b      	ldr	r3, [r3, #32]
 800062c:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR  = 1<<9;   GP_IRQ_Callback[9](); }
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <EXTI9_5_IRQHandler+0x84>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <EXTI9_5_IRQHandler+0x80>
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <EXTI9_5_IRQHandler+0x84>)
 800063c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000640:	615a      	str	r2, [r3, #20]
 8000642:	4b03      	ldr	r3, [pc, #12]	; (8000650 <EXTI9_5_IRQHandler+0x88>)
 8000644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000646:	4798      	blx	r3
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40010400 	.word	0x40010400
 8000650:	2000001c 	.word	0x2000001c

08000654 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_Callback[10](); }
 8000658:	4b2d      	ldr	r3, [pc, #180]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000660:	2b00      	cmp	r3, #0
 8000662:	d008      	beq.n	8000676 <EXTI15_10_IRQHandler+0x22>
 8000664:	4b2a      	ldr	r3, [pc, #168]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	4a29      	ldr	r2, [pc, #164]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 800066a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800066e:	6153      	str	r3, [r2, #20]
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 8000672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000674:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_Callback[11](); }
 8000676:	4b26      	ldr	r3, [pc, #152]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800067e:	2b00      	cmp	r3, #0
 8000680:	d008      	beq.n	8000694 <EXTI15_10_IRQHandler+0x40>
 8000682:	4b23      	ldr	r3, [pc, #140]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a22      	ldr	r2, [pc, #136]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000688:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 8000690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000692:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_Callback[12](); }
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800069c:	2b00      	cmp	r3, #0
 800069e:	d008      	beq.n	80006b2 <EXTI15_10_IRQHandler+0x5e>
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	4a1a      	ldr	r2, [pc, #104]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006aa:	6153      	str	r3, [r2, #20]
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 80006ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b0:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_Callback[13](); }
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d008      	beq.n	80006d0 <EXTI15_10_IRQHandler+0x7c>
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006c8:	6153      	str	r3, [r2, #20]
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 80006cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ce:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_Callback[14](); }
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d008      	beq.n	80006ee <EXTI15_10_IRQHandler+0x9a>
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6153      	str	r3, [r2, #20]
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 80006ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ec:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_Callback[15](); }
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d008      	beq.n	800070c <EXTI15_10_IRQHandler+0xb8>
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a04      	ldr	r2, [pc, #16]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b03      	ldr	r3, [pc, #12]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 8000708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800070a:	4798      	blx	r3
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40010400 	.word	0x40010400
 8000714:	2000001c 	.word	0x2000001c

08000718 <GET_CRLH_Position>:
#include "GPIO.h"

/**================================================================ */

uint8_t GET_CRLH_Position(uint16_t PinNumber)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000728:	f000 80a5 	beq.w	8000876 <GET_CRLH_Position+0x15e>
 800072c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000730:	f300 80a3 	bgt.w	800087a <GET_CRLH_Position+0x162>
 8000734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000738:	f000 809b 	beq.w	8000872 <GET_CRLH_Position+0x15a>
 800073c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000740:	f300 809b 	bgt.w	800087a <GET_CRLH_Position+0x162>
 8000744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000748:	f000 8091 	beq.w	800086e <GET_CRLH_Position+0x156>
 800074c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000750:	f300 8093 	bgt.w	800087a <GET_CRLH_Position+0x162>
 8000754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000758:	f000 8087 	beq.w	800086a <GET_CRLH_Position+0x152>
 800075c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000760:	f300 808b 	bgt.w	800087a <GET_CRLH_Position+0x162>
 8000764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000768:	d07d      	beq.n	8000866 <GET_CRLH_Position+0x14e>
 800076a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800076e:	f300 8084 	bgt.w	800087a <GET_CRLH_Position+0x162>
 8000772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000776:	d074      	beq.n	8000862 <GET_CRLH_Position+0x14a>
 8000778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800077c:	dc7d      	bgt.n	800087a <GET_CRLH_Position+0x162>
 800077e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000782:	d06c      	beq.n	800085e <GET_CRLH_Position+0x146>
 8000784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000788:	dc77      	bgt.n	800087a <GET_CRLH_Position+0x162>
 800078a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800078e:	d064      	beq.n	800085a <GET_CRLH_Position+0x142>
 8000790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000794:	dc71      	bgt.n	800087a <GET_CRLH_Position+0x162>
 8000796:	2b80      	cmp	r3, #128	; 0x80
 8000798:	d05d      	beq.n	8000856 <GET_CRLH_Position+0x13e>
 800079a:	2b80      	cmp	r3, #128	; 0x80
 800079c:	dc6d      	bgt.n	800087a <GET_CRLH_Position+0x162>
 800079e:	2b20      	cmp	r3, #32
 80007a0:	dc48      	bgt.n	8000834 <GET_CRLH_Position+0x11c>
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	dd69      	ble.n	800087a <GET_CRLH_Position+0x162>
 80007a6:	3b01      	subs	r3, #1
 80007a8:	2b1f      	cmp	r3, #31
 80007aa:	d866      	bhi.n	800087a <GET_CRLH_Position+0x162>
 80007ac:	a201      	add	r2, pc, #4	; (adr r2, 80007b4 <GET_CRLH_Position+0x9c>)
 80007ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b2:	bf00      	nop
 80007b4:	0800083b 	.word	0x0800083b
 80007b8:	0800083f 	.word	0x0800083f
 80007bc:	0800087b 	.word	0x0800087b
 80007c0:	08000843 	.word	0x08000843
 80007c4:	0800087b 	.word	0x0800087b
 80007c8:	0800087b 	.word	0x0800087b
 80007cc:	0800087b 	.word	0x0800087b
 80007d0:	08000847 	.word	0x08000847
 80007d4:	0800087b 	.word	0x0800087b
 80007d8:	0800087b 	.word	0x0800087b
 80007dc:	0800087b 	.word	0x0800087b
 80007e0:	0800087b 	.word	0x0800087b
 80007e4:	0800087b 	.word	0x0800087b
 80007e8:	0800087b 	.word	0x0800087b
 80007ec:	0800087b 	.word	0x0800087b
 80007f0:	0800084b 	.word	0x0800084b
 80007f4:	0800087b 	.word	0x0800087b
 80007f8:	0800087b 	.word	0x0800087b
 80007fc:	0800087b 	.word	0x0800087b
 8000800:	0800087b 	.word	0x0800087b
 8000804:	0800087b 	.word	0x0800087b
 8000808:	0800087b 	.word	0x0800087b
 800080c:	0800087b 	.word	0x0800087b
 8000810:	0800087b 	.word	0x0800087b
 8000814:	0800087b 	.word	0x0800087b
 8000818:	0800087b 	.word	0x0800087b
 800081c:	0800087b 	.word	0x0800087b
 8000820:	0800087b 	.word	0x0800087b
 8000824:	0800087b 	.word	0x0800087b
 8000828:	0800087b 	.word	0x0800087b
 800082c:	0800087b 	.word	0x0800087b
 8000830:	0800084f 	.word	0x0800084f
 8000834:	2b40      	cmp	r3, #64	; 0x40
 8000836:	d00c      	beq.n	8000852 <GET_CRLH_Position+0x13a>
 8000838:	e01f      	b.n	800087a <GET_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 800083a:	2300      	movs	r3, #0
 800083c:	e01e      	b.n	800087c <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 800083e:	2304      	movs	r3, #4
 8000840:	e01c      	b.n	800087c <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8000842:	2308      	movs	r3, #8
 8000844:	e01a      	b.n	800087c <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8000846:	230c      	movs	r3, #12
 8000848:	e018      	b.n	800087c <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 800084a:	2310      	movs	r3, #16
 800084c:	e016      	b.n	800087c <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 800084e:	2314      	movs	r3, #20
 8000850:	e014      	b.n	800087c <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8000852:	2318      	movs	r3, #24
 8000854:	e012      	b.n	800087c <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8000856:	231c      	movs	r3, #28
 8000858:	e010      	b.n	800087c <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 800085a:	2300      	movs	r3, #0
 800085c:	e00e      	b.n	800087c <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 800085e:	2304      	movs	r3, #4
 8000860:	e00c      	b.n	800087c <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8000862:	2308      	movs	r3, #8
 8000864:	e00a      	b.n	800087c <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8000866:	230c      	movs	r3, #12
 8000868:	e008      	b.n	800087c <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 800086a:	2310      	movs	r3, #16
 800086c:	e006      	b.n	800087c <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 800086e:	2314      	movs	r3, #20
 8000870:	e004      	b.n	800087c <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8000872:	2318      	movs	r3, #24
 8000874:	e002      	b.n	800087c <GET_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8000876:	231c      	movs	r3, #28
 8000878:	e000      	b.n	800087c <GET_CRLH_Position+0x164>
		break;
	}
	return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop

08000888 <MCAL_GPIO_Init>:
 * @retval		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init (GPIO_TypeDef* GPIOX , GPIO_PinConfig_t* pinconfig)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15

	volatile uint32_t* config_register = NULL;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
	config_register = (pinconfig->GPIO_PinNumber < GPIO_PIN_8)?&GPIOX->CRL:&GPIOX->CRH;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	2bff      	cmp	r3, #255	; 0xff
 800089c:	d801      	bhi.n	80008a2 <MCAL_GPIO_Init+0x1a>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	e001      	b.n	80008a6 <MCAL_GPIO_Init+0x1e>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3304      	adds	r3, #4
 80008a6:	613b      	str	r3, [r7, #16]
	uint8_t pin_final_config = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	75fb      	strb	r3, [r7, #23]
	uint8_t pin_position = GET_CRLH_Position(pinconfig->GPIO_PinNumber);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff31 	bl	8000718 <GET_CRLH_Position>
 80008b6:	4603      	mov	r3, r0
 80008b8:	73fb      	strb	r3, [r7, #15]

	// clear CNFy[1:0] MODEy[1:0]
	(*config_register) &= ~(0xF << pin_position);
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	7bfa      	ldrb	r2, [r7, #15]
 80008c0:	210f      	movs	r1, #15
 80008c2:	fa01 f202 	lsl.w	r2, r1, r2
 80008c6:	43d2      	mvns	r2, r2
 80008c8:	401a      	ands	r2, r3
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	789b      	ldrb	r3, [r3, #2]
 80008d2:	2b07      	cmp	r3, #7
 80008d4:	d00b      	beq.n	80008ee <MCAL_GPIO_Init+0x66>
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	789b      	ldrb	r3, [r3, #2]
 80008da:	2b06      	cmp	r3, #6
 80008dc:	d007      	beq.n	80008ee <MCAL_GPIO_Init+0x66>
			(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	789b      	ldrb	r3, [r3, #2]
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 80008e2:	2b05      	cmp	r3, #5
 80008e4:	d003      	beq.n	80008ee <MCAL_GPIO_Init+0x66>
			(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	789b      	ldrb	r3, [r3, #2]
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	d10e      	bne.n	800090c <MCAL_GPIO_Init+0x84>

	{	//---------------------CNF[1:0](upper 2 bits)------------MODE[1:0](lower 2 bits)
		pin_final_config = (((pinconfig->GPIO_MODE - 4) << 2) | (pinconfig->GPIO_Output_Speed)) & 0x0F;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	789b      	ldrb	r3, [r3, #2]
 80008f2:	3b04      	subs	r3, #4
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	b25a      	sxtb	r2, r3
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	78db      	ldrb	r3, [r3, #3]
 80008fc:	b25b      	sxtb	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b25b      	sxtb	r3, r3
 8000902:	b2db      	uxtb	r3, r3
 8000904:	f003 030f 	and.w	r3, r3, #15
 8000908:	75fb      	strb	r3, [r7, #23]
 800090a:	e031      	b.n	8000970 <MCAL_GPIO_Init+0xe8>

	//if pin is input (MODE[1:0] == 00)
	else
	{
		//if pin is analog or floating
		if(pinconfig->GPIO_MODE == GPIO_MODE_Analog ||pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	789b      	ldrb	r3, [r3, #2]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d003      	beq.n	800091c <MCAL_GPIO_Init+0x94>
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	789b      	ldrb	r3, [r3, #2]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d107      	bne.n	800092c <MCAL_GPIO_Init+0xa4>
		{
			pin_final_config = ((pinconfig->GPIO_MODE <<2) | (0x0)) & 0x0F;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	789b      	ldrb	r3, [r3, #2]
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f003 030f 	and.w	r3, r3, #15
 8000928:	75fb      	strb	r3, [r7, #23]
 800092a:	e021      	b.n	8000970 <MCAL_GPIO_Init+0xe8>
		}

		//if pin is Alternate function input (same as floating)
		else if (pinconfig->GPIO_MODE == GPIO_MODE_AF_INPUT)  //consider it as input floating
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	789b      	ldrb	r3, [r3, #2]
 8000930:	2b08      	cmp	r3, #8
 8000932:	d107      	bne.n	8000944 <MCAL_GPIO_Init+0xbc>
		{

			pin_final_config = (((pinconfig->GPIO_MODE  << 2) | (0x0)) & 0x0F);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	789b      	ldrb	r3, [r3, #2]
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	b2db      	uxtb	r3, r3
 800093c:	f003 030f 	and.w	r3, r3, #15
 8000940:	75fb      	strb	r3, [r7, #23]
 8000942:	e015      	b.n	8000970 <MCAL_GPIO_Init+0xe8>
		}
		//if pin is PU or PD
		else{
			//because (GPIO_MODE_INPUT_PU value is 01 (same as in TRM)
			pin_final_config = (((GPIO_MODE_INPUT_PU  << 2) | (0x0)) & 0x0F);
 8000944:	2308      	movs	r3, #8
 8000946:	75fb      	strb	r3, [r7, #23]

			//pin is PU
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	789b      	ldrb	r3, [r3, #2]
 800094c:	2b02      	cmp	r3, #2
 800094e:	d107      	bne.n	8000960 <MCAL_GPIO_Init+0xd8>
			{
				//from TRM
				GPIOX->ODR |= pinconfig->GPIO_PinNumber;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	8812      	ldrh	r2, [r2, #0]
 8000958:	431a      	orrs	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	e007      	b.n	8000970 <MCAL_GPIO_Init+0xe8>
			}
			//pin is PD
			else
			{
				//From TRM
				GPIOX->ODR &= ~(pinconfig->GPIO_PinNumber);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	8812      	ldrh	r2, [r2, #0]
 8000968:	43d2      	mvns	r2, r2
 800096a:	401a      	ands	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	60da      	str	r2, [r3, #12]
			}
		}
	}

	(*config_register) |= (pin_final_config << pin_position);
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	7df9      	ldrb	r1, [r7, #23]
 8000976:	7bfa      	ldrb	r2, [r7, #15]
 8000978:	fa01 f202 	lsl.w	r2, r1, r2
 800097c:	431a      	orrs	r2, r3
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	601a      	str	r2, [r3, #0]

}
 8000982:	bf00      	nop
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <MCAL_GPIO_WritePin>:
 * @param[in]	-Value: Pin value
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOX , uint16_t PinNumber, uint8_t value)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	460b      	mov	r3, r1
 8000994:	807b      	strh	r3, [r7, #2]
 8000996:	4613      	mov	r3, r2
 8000998:	707b      	strb	r3, [r7, #1]

	if (value != GPIO_PIN_RESET)
 800099a:	787b      	ldrb	r3, [r7, #1]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d003      	beq.n	80009a8 <MCAL_GPIO_WritePin+0x1e>
		//alternative solution

		//in the BSRR register
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOX->BSRR = (uint32_t)PinNumber ;
 80009a0:	887a      	ldrh	r2, [r7, #2]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	611a      	str	r2, [r3, #16]
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOX->BRR = (uint32_t)PinNumber;
	}

}
 80009a6:	e002      	b.n	80009ae <MCAL_GPIO_WritePin+0x24>
		GPIOX->BRR = (uint32_t)PinNumber;
 80009a8:	887a      	ldrh	r2, [r7, #2]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	615a      	str	r2, [r3, #20]
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <MCAL_GPIO_WritePort>:
 * @param[in]	-GPIOx: where x can be (A..E depending on device used) to select the GPIO Peripheral
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef* GPIOX , uint16_t value)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	807b      	strh	r3, [r7, #2]
	GPIOX->ODR = (uint32_t)value;
 80009c4:	887a      	ldrh	r2, [r7, #2]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60da      	str	r2, [r3, #12]
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <delay_ms>:

#include "lcd.h"

GPIO_PinConfig_t PinCfg ;

void delay_ms(uint32_t time) {
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++){
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	e00b      	b.n	80009fa <delay_ms+0x26>
		for (j = 0; j < 100; j++);
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	e002      	b.n	80009ee <delay_ms+0x1a>
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	3301      	adds	r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	2b63      	cmp	r3, #99	; 0x63
 80009f2:	d9f9      	bls.n	80009e8 <delay_ms+0x14>
	for (i = 0; i < time; i++){
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3301      	adds	r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d3ef      	bcc.n	80009e2 <delay_ms+0xe>
	}

}
 8000a02:	bf00      	nop
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
	...

08000a10 <LCD_GPIO_init>:

void LCD_GPIO_init() {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 8000a14:	4b52      	ldr	r3, [pc, #328]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a1a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a1c:	4b50      	ldr	r3, [pc, #320]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a1e:	2204      	movs	r2, #4
 8000a20:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a22:	4b4f      	ldr	r3, [pc, #316]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000a28:	494d      	ldr	r1, [pc, #308]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a2a:	484e      	ldr	r0, [pc, #312]	; (8000b64 <LCD_GPIO_init+0x154>)
 8000a2c:	f7ff ff2c 	bl	8000888 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 8000a30:	4b4b      	ldr	r3, [pc, #300]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a36:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a38:	4b49      	ldr	r3, [pc, #292]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a3e:	4b48      	ldr	r3, [pc, #288]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000a44:	4946      	ldr	r1, [pc, #280]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a46:	4847      	ldr	r0, [pc, #284]	; (8000b64 <LCD_GPIO_init+0x154>)
 8000a48:	f7ff ff1e 	bl	8000888 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 8000a4c:	4b44      	ldr	r3, [pc, #272]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a52:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a54:	4b42      	ldr	r3, [pc, #264]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a56:	2204      	movs	r2, #4
 8000a58:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a5a:	4b41      	ldr	r3, [pc, #260]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000a60:	493f      	ldr	r1, [pc, #252]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a62:	4840      	ldr	r0, [pc, #256]	; (8000b64 <LCD_GPIO_init+0x154>)
 8000a64:	f7ff ff10 	bl	8000888 <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000a68:	4b3d      	ldr	r3, [pc, #244]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a6e:	4b3c      	ldr	r3, [pc, #240]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a70:	2204      	movs	r2, #4
 8000a72:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a74:	4b3a      	ldr	r3, [pc, #232]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000a7a:	4939      	ldr	r1, [pc, #228]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a7c:	4839      	ldr	r0, [pc, #228]	; (8000b64 <LCD_GPIO_init+0x154>)
 8000a7e:	f7ff ff03 	bl	8000888 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000a82:	4b37      	ldr	r3, [pc, #220]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a84:	2202      	movs	r2, #2
 8000a86:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a88:	4b35      	ldr	r3, [pc, #212]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a8e:	4b34      	ldr	r3, [pc, #208]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000a94:	4932      	ldr	r1, [pc, #200]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a96:	4833      	ldr	r0, [pc, #204]	; (8000b64 <LCD_GPIO_init+0x154>)
 8000a98:	f7ff fef6 	bl	8000888 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000a9c:	4b30      	ldr	r3, [pc, #192]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000aa2:	4b2f      	ldr	r3, [pc, #188]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000aa8:	4b2d      	ldr	r3, [pc, #180]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000aae:	492c      	ldr	r1, [pc, #176]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000ab0:	482c      	ldr	r0, [pc, #176]	; (8000b64 <LCD_GPIO_init+0x154>)
 8000ab2:	f7ff fee9 	bl	8000888 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000ab6:	4b2a      	ldr	r3, [pc, #168]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000ab8:	2208      	movs	r2, #8
 8000aba:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000abc:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000abe:	2204      	movs	r2, #4
 8000ac0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000ac2:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000ac8:	4925      	ldr	r1, [pc, #148]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000aca:	4826      	ldr	r0, [pc, #152]	; (8000b64 <LCD_GPIO_init+0x154>)
 8000acc:	f7ff fedc 	bl	8000888 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000ad0:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000ad2:	2210      	movs	r2, #16
 8000ad4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000ad6:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000ad8:	2204      	movs	r2, #4
 8000ada:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000adc:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000ae2:	491f      	ldr	r1, [pc, #124]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000ae4:	481f      	ldr	r0, [pc, #124]	; (8000b64 <LCD_GPIO_init+0x154>)
 8000ae6:	f7ff fecf 	bl	8000888 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000aec:	2220      	movs	r2, #32
 8000aee:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000af2:	2204      	movs	r2, #4
 8000af4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000afc:	4918      	ldr	r1, [pc, #96]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000afe:	4819      	ldr	r0, [pc, #100]	; (8000b64 <LCD_GPIO_init+0x154>)
 8000b00:	f7ff fec2 	bl	8000888 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000b06:	2240      	movs	r2, #64	; 0x40
 8000b08:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000b16:	4912      	ldr	r1, [pc, #72]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000b18:	4812      	ldr	r0, [pc, #72]	; (8000b64 <LCD_GPIO_init+0x154>)
 8000b1a:	f7ff feb5 	bl	8000888 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000b26:	2204      	movs	r2, #4
 8000b28:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000b30:	490b      	ldr	r1, [pc, #44]	; (8000b60 <LCD_GPIO_init+0x150>)
 8000b32:	480c      	ldr	r0, [pc, #48]	; (8000b64 <LCD_GPIO_init+0x154>)
 8000b34:	f7ff fea8 	bl	8000888 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3e:	4809      	ldr	r0, [pc, #36]	; (8000b64 <LCD_GPIO_init+0x154>)
 8000b40:	f7ff ff23 	bl	800098a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4a:	4806      	ldr	r0, [pc, #24]	; (8000b64 <LCD_GPIO_init+0x154>)
 8000b4c:	f7ff ff1d 	bl	800098a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b56:	4803      	ldr	r0, [pc, #12]	; (8000b64 <LCD_GPIO_init+0x154>)
 8000b58:	f7ff ff17 	bl	800098a <MCAL_GPIO_WritePin>

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000058 	.word	0x20000058
 8000b64:	40010800 	.word	0x40010800

08000b68 <LCD_clear_screen>:

void LCD_clear_screen() {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f000 f857 	bl	8000c20 <LCD_WRITE_COMMAND>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <LCD_lcd_kick>:

void LCD_lcd_kick() {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b82:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <LCD_lcd_kick+0x28>)
 8000b84:	f7ff ff01 	bl	800098a <MCAL_GPIO_WritePin>
	delay_ms(50);
 8000b88:	2032      	movs	r0, #50	; 0x32
 8000b8a:	f7ff ff23 	bl	80009d4 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <LCD_lcd_kick+0x28>)
 8000b96:	f7ff fef8 	bl	800098a <MCAL_GPIO_WritePin>
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40010800 	.word	0x40010800

08000ba4 <LCD_GOTO_XY>:

void LCD_GOTO_XY(uint8_t line, uint8_t position) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	460a      	mov	r2, r1
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d108      	bne.n	8000bcc <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 8000bba:	79bb      	ldrb	r3, [r7, #6]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d805      	bhi.n	8000bcc <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 8000bc0:	79bb      	ldrb	r3, [r7, #6]
 8000bc2:	3b80      	subs	r3, #128	; 0x80
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f82a 	bl	8000c20 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d108      	bne.n	8000be4 <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d805      	bhi.n	8000be4 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000bd8:	79bb      	ldrb	r3, [r7, #6]
 8000bda:	3b40      	subs	r3, #64	; 0x40
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f81e 	bl	8000c20 <LCD_WRITE_COMMAND>
		}
	}
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <LCD_INIT>:

void LCD_INIT() {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

	delay_ms(20);
 8000bf0:	2014      	movs	r0, #20
 8000bf2:	f7ff feef 	bl	80009d4 <delay_ms>
	LCD_GPIO_init();
 8000bf6:	f7ff ff0b 	bl	8000a10 <LCD_GPIO_init>
	delay_ms(15);
 8000bfa:	200f      	movs	r0, #15
 8000bfc:	f7ff feea 	bl	80009d4 <delay_ms>

	LCD_clear_screen();
 8000c00:	f7ff ffb2 	bl	8000b68 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000c04:	2038      	movs	r0, #56	; 0x38
 8000c06:	f000 f80b 	bl	8000c20 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000c0a:	2006      	movs	r0, #6
 8000c0c:	f000 f808 	bl	8000c20 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000c10:	2080      	movs	r0, #128	; 0x80
 8000c12:	f000 f805 	bl	8000c20 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000c16:	200f      	movs	r0, #15
 8000c18:	f000 f802 	bl	8000c20 <LCD_WRITE_COMMAND>
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(uint8_t command) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480b      	ldr	r0, [pc, #44]	; (8000c60 <LCD_WRITE_COMMAND+0x40>)
 8000c32:	f7ff fec1 	bl	80009b8 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c3c:	4808      	ldr	r0, [pc, #32]	; (8000c60 <LCD_WRITE_COMMAND+0x40>)
 8000c3e:	f7ff fea4 	bl	800098a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <LCD_WRITE_COMMAND+0x40>)
 8000c4a:	f7ff fe9e 	bl	800098a <MCAL_GPIO_WritePin>

	delay_ms(1);
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f7ff fec0 	bl	80009d4 <delay_ms>
	LCD_lcd_kick();
 8000c54:	f7ff ff90 	bl	8000b78 <LCD_lcd_kick>

}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40010800 	.word	0x40010800

08000c64 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	4619      	mov	r1, r3
 8000c74:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <LCD_WRITE_CHAR+0x40>)
 8000c76:	f7ff fe9f 	bl	80009b8 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c80:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <LCD_WRITE_CHAR+0x40>)
 8000c82:	f7ff fe82 	bl	800098a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <LCD_WRITE_CHAR+0x40>)
 8000c8e:	f7ff fe7c 	bl	800098a <MCAL_GPIO_WritePin>
	delay_ms(1);
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff fe9e 	bl	80009d4 <delay_ms>
	LCD_lcd_kick();
 8000c98:	f7ff ff6e 	bl	8000b78 <LCD_lcd_kick>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40010800 	.word	0x40010800

08000ca8 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000cb4:	e01c      	b.n	8000cf0 <LCD_WRITE_STRING+0x48>
		count++;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ffcd 	bl	8000c64 <LCD_WRITE_CHAR>
		if (count == 16) {
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2b10      	cmp	r3, #16
 8000cce:	d104      	bne.n	8000cda <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2002      	movs	r0, #2
 8000cd4:	f7ff ff66 	bl	8000ba4 <LCD_GOTO_XY>
 8000cd8:	e00a      	b.n	8000cf0 <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2b20      	cmp	r3, #32
 8000cde:	d107      	bne.n	8000cf0 <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 8000ce0:	f7ff ff42 	bl	8000b68 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff ff5c 	bl	8000ba4 <LCD_GOTO_XY>
			count = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1de      	bne.n	8000cb6 <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <my_wait>:
#include "keypad.h"

uint8_t IRQ_flag = 0;

void my_wait(int x)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b085      	sub	sp, #20
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
	unsigned int i, j;
	for(i = 0; i<x; i++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	e00b      	b.n	8000d28 <my_wait+0x26>
		for(j=0; j<255; j++);
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	e002      	b.n	8000d1c <my_wait+0x1a>
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	2bfe      	cmp	r3, #254	; 0xfe
 8000d20:	d9f9      	bls.n	8000d16 <my_wait+0x14>
	for(i = 0; i<x; i++)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	3301      	adds	r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d3ef      	bcc.n	8000d10 <my_wait+0xe>
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <EXTI9_Callback>:

void EXTI9_Callback(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	IRQ_flag = 1;
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <EXTI9_Callback+0x1c>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTI9 HAS HAPPENED _|- ");
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <EXTI9_Callback+0x20>)
 8000d48:	f7ff ffae 	bl	8000ca8 <LCD_WRITE_STRING>
	my_wait(1000);
 8000d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d50:	f7ff ffd7 	bl	8000d02 <my_wait>
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000005c 	.word	0x2000005c
 8000d5c:	08000ea4 	.word	0x08000ea4

08000d60 <Clock_init>:



void Clock_init()
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <Clock_init+0x30>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <Clock_init+0x30>)
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <Clock_init+0x30>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <Clock_init+0x30>)
 8000d76:	f043 0308 	orr.w	r3, r3, #8
 8000d7a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <Clock_init+0x30>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <Clock_init+0x30>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6193      	str	r3, [r2, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	40021000 	.word	0x40021000

08000d94 <main>:
}



int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
	Clock_init();
 8000d9a:	f7ff ffe1 	bl	8000d60 <Clock_init>

	LCD_INIT();
 8000d9e:	f7ff ff25 	bl	8000bec <LCD_INIT>
	LCD_clear_screen();
 8000da2:	f7ff fee1 	bl	8000b68 <LCD_clear_screen>



	EXTI_PinConfig_t  EXTI_CFG;
	EXTI_CFG.EXTI_Pin = EXTI9PB9;
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <main+0x50>)
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.TriggerCase = EXTI_TriggerRising;
 8000db2:	2300      	movs	r3, #0
 8000db4:	763b      	strb	r3, [r7, #24]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_Callback;
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <main+0x54>)
 8000db8:	61fb      	str	r3, [r7, #28]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_Enable;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	767b      	strb	r3, [r7, #25]

	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff faaa 	bl	800031c <MCAL_EXTI_GPIO_Init>

	IRQ_flag = 1;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <main+0x58>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		if(IRQ_flag)
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <main+0x58>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0fb      	beq.n	8000dce <main+0x3a>
		{
			LCD_clear_screen();
 8000dd6:	f7ff fec7 	bl	8000b68 <LCD_clear_screen>
			IRQ_flag = 0;
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <main+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
		if(IRQ_flag)
 8000de0:	e7f5      	b.n	8000dce <main+0x3a>
 8000de2:	bf00      	nop
 8000de4:	08000ec0 	.word	0x08000ec0
 8000de8:	08000d3d 	.word	0x08000d3d
 8000dec:	2000005c 	.word	0x2000005c

08000df0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000df2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfa:	490d      	ldr	r1, [pc, #52]	; (8000e30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <LoopForever+0xe>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e10:	4c0a      	ldr	r4, [pc, #40]	; (8000e3c <LoopForever+0x16>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e1e:	f000 f811 	bl	8000e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e22:	f7ff ffb7 	bl	8000d94 <main>

08000e26 <LoopForever>:

LoopForever:
  b LoopForever
 8000e26:	e7fe      	b.n	8000e26 <LoopForever>
  ldr   r0, =_estack
 8000e28:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e34:	08000ed4 	.word	0x08000ed4
  ldr r2, =_sbss
 8000e38:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e3c:	20000060 	.word	0x20000060

08000e40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC1_2_IRQHandler>
	...

08000e44 <__libc_init_array>:
 8000e44:	b570      	push	{r4, r5, r6, lr}
 8000e46:	2600      	movs	r6, #0
 8000e48:	4d0c      	ldr	r5, [pc, #48]	; (8000e7c <__libc_init_array+0x38>)
 8000e4a:	4c0d      	ldr	r4, [pc, #52]	; (8000e80 <__libc_init_array+0x3c>)
 8000e4c:	1b64      	subs	r4, r4, r5
 8000e4e:	10a4      	asrs	r4, r4, #2
 8000e50:	42a6      	cmp	r6, r4
 8000e52:	d109      	bne.n	8000e68 <__libc_init_array+0x24>
 8000e54:	f000 f81a 	bl	8000e8c <_init>
 8000e58:	2600      	movs	r6, #0
 8000e5a:	4d0a      	ldr	r5, [pc, #40]	; (8000e84 <__libc_init_array+0x40>)
 8000e5c:	4c0a      	ldr	r4, [pc, #40]	; (8000e88 <__libc_init_array+0x44>)
 8000e5e:	1b64      	subs	r4, r4, r5
 8000e60:	10a4      	asrs	r4, r4, #2
 8000e62:	42a6      	cmp	r6, r4
 8000e64:	d105      	bne.n	8000e72 <__libc_init_array+0x2e>
 8000e66:	bd70      	pop	{r4, r5, r6, pc}
 8000e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e6c:	4798      	blx	r3
 8000e6e:	3601      	adds	r6, #1
 8000e70:	e7ee      	b.n	8000e50 <__libc_init_array+0xc>
 8000e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e76:	4798      	blx	r3
 8000e78:	3601      	adds	r6, #1
 8000e7a:	e7f2      	b.n	8000e62 <__libc_init_array+0x1e>
 8000e7c:	08000ecc 	.word	0x08000ecc
 8000e80:	08000ecc 	.word	0x08000ecc
 8000e84:	08000ecc 	.word	0x08000ecc
 8000e88:	08000ed0 	.word	0x08000ed0

08000e8c <_init>:
 8000e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e8e:	bf00      	nop
 8000e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e92:	bc08      	pop	{r3}
 8000e94:	469e      	mov	lr, r3
 8000e96:	4770      	bx	lr

08000e98 <_fini>:
 8000e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9a:	bf00      	nop
 8000e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e9e:	bc08      	pop	{r3}
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	4770      	bx	lr
